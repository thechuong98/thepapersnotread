{"componentChunkName":"component---src-templates-blog-post-js","path":"/ja/algebraic-effects-for-the-rest-of-us/","result":{"data":{"site":{"siteMetadata":{"title":"The Papers not read","author":"The Chuong Chu"}},"markdownRemark":{"id":"0e8a41a7-7361-5375-8e32-6f90b7833bca","html":"<p>Algebraic Effects について聞いたことはあるでしょうか？</p>\n<p>最初に私がこの概念が何なのか、なぜ気にする必要があるのかを理解しようと試みたときは全然ダメでした。<a href=\"https://www.eff-lang.org/handlers-tutorial.pdf\">いくつか</a>の<a href=\"https://www.microsoft.com/en-us/research/wp-content/uploads/2016/08/algeff-tr-2016-v2.pdf\">PDF</a> を見つけましたが、余計にわからなくなりました（リンク先は学術的な PDF で、読んでで眠くなりました）。</p>\n<p>しかし同僚の Sebastian は<a href=\"https://mobile.twitter.com/sebmarkbage/status/763792452289343490\">ずっと</a>この<a href=\"https://mobile.twitter.com/sebmarkbage/status/776883429400915968\">概念</a>について<a href=\"https://mobile.twitter.com/sebmarkbage/status/776840575207116800\">言及</a>を<a href=\"https://mobile.twitter.com/sebmarkbage/status/969279885276454912\">し続けていました</a>。これが私たちが React の中でやってることのメンタルモデルなんですよと（Sebastian は React チームで働いていて、これまで相当な数のアイデアを思いついています。それには hooks や Suspense といったものも含まれます）。気づいたら React チームではお決まりのジョークとして、しばしば会話の最後をこんな感じで締めるようになりました。</p>\n<p><img src=\"./effects.jpg\" alt=\"&#x22;Algebraic Effects&#x22; caption on the &#x22;Ancient Aliens&#x22; guy meme\"></p>\n<p>次第に、Algebraic Effects というのはなかなかイカした概念で、例の PDF から感じるような怖いものではないことがわかりました。<strong>もしあなたが単に React を使っているだけなら、知らないといけないことはありません — でも私がそうだったように、興味が湧いてきたならこのまま読み続けましょう。</strong></p>\n<p><em>（免責事項: 私はプログラミング言語の研究者ではなく、そのため一部めちゃくちゃな説明があるかもしれません。この分野は素人なので、指摘は歓迎します！）</em></p>\n<h3>まだプロダクションでは使えませんからね</h3>\n<p><em>Algebraic Effects</em> というのは研究用プログラミング言語が持っている機能のひとつです。ということはつまり、<strong>この機能は <code>if</code> 文 とか関数とか <code>async / await</code> などとは違い、実際のプロダクションコードで使ってることはおそらくないということです</strong>。一部の<a href=\"https://www.eff-lang.org/\">ごく少数</a>の<a href=\"https://www.microsoft.com/en-us/research/project/koka/\">言語</a>がそれをサポートしており、当の言語自体この概念の探求のために作られたものだったりします。プロダクションに取り入れようという動きは OCaml には見られるようですが……まだまだ<a href=\"https://github.com/ocaml-multicore/ocaml-multicore/wiki\">進行中</a>といった具合です。要はまだまだ<a href=\"https://www.youtube.com/watch?v=otCpCn0l4Wo\">Can't Touch This</a>という訳です。</p>\n<blockquote>\n<p>追記: 何人かの方から、LISP では<a href=\"#%E3%82%82%E3%81%A3%E3%81%A8%E8%A9%B3%E3%81%97%E3%81%8F%E5%AD%A6%E3%81%B3%E3%81%9F%E3%81%84%E4%BA%BA%E3%81%AF\">似たような仕組みがある</a>と聞きました。なので LISP を使っていればプロダクションで使えるようです。</p>\n</blockquote>\n<h3>なら何故気にするのか？</h3>\n<p>もしあなたが <code>goto</code> を使ったコードを書いていて、他の誰かが <code>if</code> 文や <code>for</code> 文を見せてくれたとしましょう。あるいはコールバック地獄の奥にいる時に誰かが <code>async / await</code> を見せてくれたら……最高だと思いませんか？</p>\n<p>まだ主流になるには数年かかるであろうプログラミング上の概念について学ぶのが好きなタイプの人にとっては、Algebraic Effects はそろそろ気になるもののはずです。<em>知っとかないとダメ</em>ってものではないですよ。いってみれば 1999 年に <code>async / await</code> について考えるようなものですから。</p>\n<h3>よし、じゃあ Algebraic Effects って何なんだい？</h3>\n<p>名前は仰々しいですが、概念はシンプルです。あなたが <code>try / catch</code> 構文に慣れ親しんでいるなら、すぐに分かるでしょう。</p>\n<p>まず <code>try / catch</code> についてまとめてみましょう。何かしら <code>throw</code> する関数があるとします。そして当の関数と <code>catch</code> 節の間にはいくつもの関数が挟まってるとしましょう。</p>\n<pre><code class=\"language-jsx{4,19}\">function getName(user) {\n  let name = user.name;\n  if (name === null) {\n    throw new Error('A girl has no name');\n  }\n  return name;\n}\n\nfunction makeFriends(user1, user2) {\n  user1.friendNames.add(getName(user2));\n  user2.friendNames.add(getName(user1));\n}\n\nconst arya = { name: null };\nconst gendry = { name: 'Gendry' };\ntry {\n  makeFriends(arya, gendry);\n} catch (err) {\n  console.log(\"Oops, that didn't work out: \", err);\n}\n</code></pre>\n<p><code>getName</code> の中で <code>throw</code> していますが、そこから <code>makeFriends</code> を介して最寄りの <code>catch</code> 節に「伝播」していきます。これが <code>try / catch</code> の重要な特徴です。<strong>途中にいるものたちはエラーハンドリングのことは気にしなくてよいということです</strong>。</p>\n<p>C 言語のようなエラーコードとは違い、<code>try / catch</code> があれば、エラーをわざわざすべての中間層で手で渡してて途中でどっか行った……みたいな心配は不要になります。自動で伝播していくからです。</p>\n<h3>これが Algebraic Effects と何の関係があるのか？</h3>\n<p>上の例ではひとたびエラーにぶつかると、もう続行できません。一度 <code>catch</code> 節に来てしまったら、元のコードをそこから再開というわけには行きません。</p>\n<p>終わりです、もう遅いです。ここでできるのはせいぜい失敗からの復帰を行うことと、よくてリトライを行うかもしれないですが、元いたところに「戻って」違うことをやる魔法のような方法はありません。<strong>しかし、Algebraic Effects があるとそれができるのです</strong>。</p>\n<p>以下は仮想的な JavaScript の文法（面白いのでこれを ES2025 と呼びましょう）で書いた例です。これを使って <code>user.name</code> がないところから<em>復帰</em>してみましょう。</p>\n<pre><code class=\"language-jsx{4,19-21}\">function getName(user) {\n  let name = user.name;\n  if (name === null) {\n    name = perform 'ask_name';\n  }\n  return name;\n}\n\nfunction makeFriends(user1, user2) {\n  user1.friendNames.add(getName(user2));\n  user2.friendNames.add(getName(user1));\n}\n\nconst arya = { name: null };\nconst gendry = { name: 'Gendry' };\ntry {\n  makeFriends(arya, gendry);\n} handle (effect) {\n  if (effect === 'ask_name') {\n    resume with 'Arya Stark';\n  }\n}\n</code></pre>\n<p><em>（もし 2025 年にインターネットで \"ES2025\" について調べてここにたどり着いた読者がいたらごめんなさい。もしそれまでに Algebraic Effects が JavaScript に取り込まれていたら喜んで更新しますので！）</em></p>\n<p>ここでは <code>throw</code> の代わりに仮想的な <code>perform</code> というキーワードを、<code>try / catch</code> の代わりに仮想的な <code>try / handle</code> を使います。<strong>構文自体は大事ではありません、ひとまず概念の表現として必要なものを考えてみただけです。</strong></p>\n<p>一体何が起きているのでしょう？もっと詳しく見てみましょう。</p>\n<p>私たちは「エラーを投げる」かわりに <em>「エフェクトを引き起こして（perform an effect）」</em>います。ちょうど任意の値が <code>throw</code> 可能であるように、<code>perform</code> にはどんな値も渡せます。この例では文字列を渡していますが、それはオブジェクトかもしれませんし、他のデータ型でもありうるでしょう。</p>\n<pre><code class=\"language-jsx{4}\">function getName(user) {\n  let name = user.name;\n  if (name === null) {\n    name = perform 'ask_name';\n  }\n  return name;\n}\n</code></pre>\n<p>私たちがエラーを <code>throw</code> したとき、エンジンはコールスタック上方の一番近い <code>try / catch</code> エラーハンドラを見つけます。同様に、我々がエフェクトを <code>perform</code> すれば、エンジンはコールスタック上方の一番近い <code>try / handle</code> <em>エフェクトハンドラ</em> を見つけに行くでしょう。</p>\n<pre><code class=\"language-jsx{3}\">try {\n  makeFriends(arya, gendry);\n} handle (effect) {\n  if (effect === 'ask_name') {\n    resume with 'Arya Stark';\n  }\n}\n</code></pre>\n<p>このエフェクトによって、私たちは <code>name</code> がなかった時にどうするかを決めることができます。ここで（例外のケースと違った）新しいものがあるとすれば、仮想の <code>resume with</code> です。</p>\n<pre><code class=\"language-jsx{5}\">try {\n  makeFriends(arya, gendry);\n} handle (effect) {\n  if (effect === 'ask_name') {\n    resume with 'Arya Stark';\n  }\n}\n</code></pre>\n<p>これこそ、<code>try / catch</code> ではなし得ない部分です。これのおかげで<strong>エフェクトを引き起こした箇所に戻ることができて、さらにハンドラから何かを渡すことができるのです</strong> 🤯</p>\n<pre><code class=\"language-jsx{4,6,16,18}\">function getName(user) {\n  let name = user.name;\n  if (name === null) {\n    // 1. We perform an effect here\n    name = perform 'ask_name';\n    // 4. ...and end up back here (name is now 'Arya Stark')\n  }\n  return name;\n}\n\n// ...\n\ntry {\n  makeFriends(arya, gendry);\n} handle (effect) {\n  // 2. We jump to the handler (like try/catch)\n  if (effect === 'ask_name') {\n    // 3. However, we can resume with a value (unlike try/catch!)\n    resume with 'Arya Stark';\n  }\n}\n</code></pre>\n<p>ちょっと慣れるのに時間がかかるかもしれませんが、概念的には「再開できる <code>try / catch</code>」と考えてそんなに違いません。</p>\n<p>しかし、注意して欲しいのは、<strong>Algebraic Effects そのものは <code>try / catch</code> よりもずっと柔軟なもので、エラーから復帰できるというのは数あるユースケースの一つにすぎないということです。</strong>この話から始めたのは、私にとってはこれが腑に落ちるのに最も近道だったと理解したからです。</p>\n<h3>関数に色はない</h3>\n<p>Algebraic Effects を使った場合、非同期処理のコードについて、ある興味深い性質が影響してきます。</p>\n<p><code>async / await</code> のある言語では、通常<a href=\"https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/\">関数に「色」がつきます</a>。たとえば、JavaScript では <code>getName</code> を非同期にした場合、<code>makeFriends</code> やその呼び出し元も <code>async</code> に「感染」します。これは<em>一部のコードをある時は同期的、ある時は非同期にしたい</em>というケースで非常に苦しい状況になります。</p>\n<pre><code class=\"language-jsx\">// If we want to make this async...\nasync getName(user) {\n  // ...\n}\n\n// Then this has to be async too...\nasync function makeFriends(user1, user2) {\n  user1.friendNames.add(await getName(user2));\n  user2.friendNames.add(await getName(user1));\n}\n\n// And so on...\n</code></pre>\n<p>JavaScript のジェネレータも<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\">同様です</a>。ジェネレータを使うなら、間にいるものたちは皆ジェネレータを考慮に入れなければなりません。</p>\n<p>この話に何の関係があるのでしょうって？</p>\n<p>一旦 <code>async / await</code> のことは忘れてさっきの例に戻りましょう。</p>\n<pre><code class=\"language-jsx{4,19-21}\">function getName(user) {\n  let name = user.name;\n  if (name === null) {\n    name = perform 'ask_name';\n  }\n  return name;\n}\n\nfunction makeFriends(user1, user2) {\n  user1.friendNames.add(getName(user2));\n  user2.friendNames.add(getName(user1));\n}\n\nconst arya = { name: null };\nconst gendry = { name: 'Gendry' };\ntry {\n  makeFriends(arya, gendry);\n} handle (effect) {\n  if (effect === 'ask_name') {\n    resume with 'Arya Stark';\n  }\n}\n</code></pre>\n<p>ここでエフェクトハンドラが「フォールバック先の名前」を同期的には知らなかったらどうなるでしょう？ あるいはデータベースから取りたくなったら？</p>\n<p>もうお分かりでしょう。なんと <code>resume with</code> はエフェクトハンドラから非同期に呼んでもよく、その際 <code>getName</code> や <code>makeFriends</code> に何も手を加える必要はないということです。</p>\n<pre><code class=\"language-jsx{19-23}\">function getName(user) {\n  let name = user.name;\n  if (name === null) {\n    name = perform 'ask_name';\n  }\n  return name;\n}\n\nfunction makeFriends(user1, user2) {\n  user1.friendNames.add(getName(user2));\n  user2.friendNames.add(getName(user1));\n}\n\nconst arya = { name: null };\nconst gendry = { name: 'Gendry' };\ntry {\n  makeFriends(arya, gendry);\n} handle (effect) {\n  if (effect === 'ask_name') {\n    setTimeout(() => {\n      resume with 'Arya Stark';\n    }, 1000);\n  }\n}\n</code></pre>\n<p>この例では、<code>resume with</code> は一秒経つまで呼ばれません。<code>resume with</code> とは一度しか呼べないコールバックのようなものと考えられます（あるいはもっと印象的に「ワンショット限定継続」だよと友達に言ってみるのも良いでしょう）。</p>\n<p>これで Algebraic Effects の仕組みがもう少し明確になったはずです。私たちがエラーを <code>throw</code> したとき、JavaScript エンジンは「スタックをアンワインドして」、プロセス内のローカル変数は破棄されます。しかし、私たちがエフェクトを <code>perform</code> したときは、この仮想のエンジンは関数の残りの部分から<em>コールバックを作成</em>し、<code>resume with</code> がそれを呼びます。</p>\n<p><strong>もう一度いいますが、具体的な構文や特殊なキーワードはあくまでもこの記事専用のものです。そこが問題ではなく、重要なのは仕組みの方です。</strong></p>\n<h3>純粋性についての注意書き</h3>\n<p>Algebraic Effects が関数型プログラミングの研究から出てきたものであることは注目に値するでしょう。Algebraic Effects が解決する問題のいくつかは純粋関数型プログラミングに特有のものです。例えば（Haskell のような）任意の副作用を許さ<em>ない</em>ような言語では、モナドのような概念を用いてプログラムと作用（エフェクト）を接続する必要があります。モナドのチュートリアルを読んだことがある人なら、これが考えるのにコツが必要なものであることは知っているでしょう。Algebraic Effects は似たような解決を、より仰々しくない仕方でもたらすものだと言えます。</p>\n<p>そのせいか、私にとって Algebraic Effects についての多くの議論はわかりづらく感じました（私は Haskell とその周辺については<a href=\"/thepapersnotread/things-i-dont-know-as-of-2018/\">よく知りません</a>）。しかし私の思うところでは、Algebraic Effects は JavaScript のようなちっとも純粋ではない言語にとっても、<strong>非常に強力な形で「何」と「どうやって」を分離する道具になりうるということです。</strong></p>\n<p>おかげでこんな風に、<em>何をしたいのか</em>にフォーカスしたコードが書けます。</p>\n<pre><code class=\"language-jsx{2,3,5,7,12}\">function enumerateFiles(dir) {\n  const contents = perform OpenDirectory(dir);\n  perform Log('Enumerating files in ', dir);\n  for (let file of contents.files) {\n    perform HandleFile(file);\n  }\n  perform Log('Enumerating subdirectories in ', dir);\n  for (let directory of contents.dir) {\n    // We can use recursion or call other functions with effects\n    enumerateFiles(directory);\n  }\n  perform Log('Done');\n}\n</code></pre>\n<p>そして後々、<em>どうやるか</em>を指定したものでラップできます。</p>\n<pre><code class=\"language-jsx{6-7,9-11,13-14}\">let files = [];\ntry {\n  enumerateFiles('C:\\\\');\n} handle (effect) {\n  if (effect instanceof Log) {\n    myLoggingLibrary.log(effect.message);\n    resume;\n  } else if (effect instanceof OpenDirectory) {\n    myFileSystemImpl.openDir(effect.dirName, (contents) => {\n      resume with contents;\n    });\n  } else if (effect instanceof HandleFile) {\n    files.push(effect.fileName);\n    resume;\n  }\n}\n// The `files` array now has all the files\n</code></pre>\n<p>これはつまり、その部分だけを切り取ってライブラリにするのも可能ということです。</p>\n<pre><code class=\"language-jsx\">import { withMyLoggingLibrary } from 'my-log';\nimport { withMyFileSystem } from 'my-fs';\n\nfunction ourProgram() {\n  enumerateFiles('C:\\\\');\n}\n\nwithMyLoggingLibrary(() => {\n  withMyFileSystem(() => {\n    ourProgram();\n  });\n});\n</code></pre>\n<p><code>async / await</code> やジェネレータとは異なり、<strong>Algebraic Effects は「間にいる」関数に余分な複雑さを加える必要がありません。</strong>ここでの <code>enumerateFiles</code> の呼び出しは、<code>ourProgram</code> の中のもっと奥になることもあるでしょう。しかし、perform されるかもしれないエフェクトから見て<em>どこかしら上の方</em>にエフェクトハンドラがある限り、このコードはちゃんと動きます。</p>\n<p>エフェクトハンドラはプログラムのロジックを、具体的なエフェクトの実装から分離します。しかも過度な仰々しさやボイラープレートのコードなしにです。たとえばテスト中には本物のファイルシステムの代わりにフェイクのものを、コンソールに吐き出す代わりにスナップショットログ吐き出すものに挙動を置き換えたいときは、ちゃんとそうすることができます。</p>\n<pre><code class=\"language-jsx{19-23}\">import { withFakeFileSystem } from 'fake-fs';\n\nfunction withLogSnapshot(fn) {\n  let logs = [];\n  try {\n    fn();\n  } handle (effect) {\n    if (effect instanceof Log) {\n      logs.push(effect.message);\n      resume;\n    }\n  }\n  // Snapshot emitted logs.\n  expect(logs).toMatchSnapshot();\n}\n\ntest('my program', () => {\n  const fakeFiles = [/* ... */];\n  withFakeFileSystem(fakeFiles, () => {\n    withLogSnapshot(() => {\n      ourProgram();\n    });\n  });\n});\n</code></pre>\n<p>「<a href=\"https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/\">関数に色がない</a>（つまり間にいるコードはエフェクトのことを知らない）」上に、エフェクトハンドラは組み合わせて利用可能（ネストできる）なので、非常に表現力の豊かな抽象化が作れます。</p>\n<h3>型について</h3>\n<p>Algebraic Effects は静的型付け言語に由来する概念なので、どういう型として表現できるかが多くの議論で中心になります。この点が重要なことに疑いはありませんが、一方で概念を理解するのが困難になります。ですからこの記事では型の話をずっとしてきませんでした。しかし無視できない事実として、ある関数がエフェクトを perform できるという事実は通常、型シグネチャとしてコード化されます。このおかげで、よく分からないエフェクトが発行されて出どころが分からないという状況が防がれるのです。</p>\n<p>厳密には、静的型付け言語における Algebraic Effects は関数に「<a href=\"https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/\">色をつける</a>」といった議論はありえます。というのも、エフェクトは型シグネチャの一種だからです。それはその通りなのですが、新しくエフェクトを追加するために間の関数の型アノテーションを直したとして、それ自体はセマンティクス上の変化ではないはずです。少なくとも <code>async</code> を追加したりジェネレータ関数に変更するような話ではありません。また型の推論によってその変更が連鎖していくのも避けられるはずでしょう。特に大きく違うのはエフェクトに対して、何もしない関数やモック実装（たとえば、非同期のエフェクトに対して同期的な呼び出しをする）を与えることで、エフェクトを「封じ込め」られる点です。これにより、必要に応じて外側のコードへの影響を防ぐこともできますし、違ったエフェクトに変えることもできます。</p>\n<h3>JavaScript に Algebraic Effects を加えるべきか？</h3>\n<p>正直わかりません。非常に強力ではありますが、JavaScript にはちょっと<em>パワフルすぎる</em>よね、といった議論も全くありうるでしょう。</p>\n<p>私見では Algebraic Effects がぴったりハマるのは、ミュータブルな変更が通常行われない言語であり、かつ標準ライブラリが完全にエフェクトを擁する作りになっているケースでしょう。もし <code>perform Timeout(1000)</code> とか <code>perform Fetch('http://google.com')</code> とか <code>perform ReadFile('file.txt')</code> とかが普通の書き方で、言語機能としてエフェクトに対するパターンマッチや静的型検査があるのなら、それは非常にすばらしいプログラミング環境でしょう。</p>\n<p>その言語が JavaScript にコンパイルできるならもっと素晴らしいでしょうね！</p>\n<h3>ここまでの話が React にどう関係するのか？</h3>\n<p>言うほどではありません。こじつけと言われてもしょうがないとすら思います。</p>\n<p>もしあなたが<a href=\"https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html\">Time Slicing と Suspense についての私の発表</a>を見ていれば、2つ目の話がコンポーネントがキャッシュからデータを引く話に関わってきます。</p>\n<pre><code class=\"language-jsx\">function MovieDetails({ id }) {\n  // What if it's still being fetched?\n  const movie = movieCache.read(id);\n}\n</code></pre>\n<p><em>（登壇時はちょっと違うAPIを用いていましたが、そこは重要ではありません）</em></p>\n<p>これは React の「Suspense」という、データ取得のユースケース向けに鋭意開発中の機能で作られています。ここでの面白い点はもちろん、<code>movieCache</code> にはまだデータがないかもしれない — ない場合ここから下の行には行けないので、<em>どうにか</em>しないといけないというケースです。技術的には、その場合 <code>read()</code> は Promise を投げ（そう、Promise が <code>throw</code> されるんです！心で理解してください）ます。これによって実行が「一時停止（＝suspend）」されます。React は Promise をキャッチし、投げられた Promise が resolve され次第忘れずにコンポーネントのレンダリングを再開します。</p>\n<p>これは Algebraic Effects それ自体ではありません。この仕掛けはそこから<a href=\"https://mobile.twitter.com/sebmarkbage/status/941214259505119232\">インスピレーションを得た</a>ものですが、別物です。それでも同じ目的を達成します。つまりコールスタックの下の方にいるコードが、コールスタックの上にいる何か（ここでは React）に後を譲る際、間にいる関数はそのことを知らず、また <code>async</code> やジェネレータに「感染」しないようにするということです。もちろん、JavaScript で実行を後から<em>再開</em>することなど本当はできないのですが、React から見ると、Promise が解決した時に再レンダリングをするというのはほぼ同じようなものです。プログラミングモデルが<a href=\"/thepapersnotread/react-as-a-ui-runtime/#purity\">冪等性を前提にしている</a>からこそできる芸当です！</p>\n<p><a href=\"https://reactjs.org/docs/hooks-intro.html\">Hooks</a>は Algebraic Effects を思い出させるかもしれないもう一つの事例です。多くの人がまず最初に聞く質問としては次のようなことでしょう — <code>useState</code> はどうやって自分が参照しているコンポーネントを知ることができるのか？と。</p>\n<pre><code class=\"language-jsx\">function LikeButton() {\n  // How does useState know which component it's in?\n  const [isLiked, setIsLiked] = useState(false);\n}\n</code></pre>\n<p>その答えは<a href=\"/thepapersnotread/how-does-setstate-know-what-to-do/\">この記事の終わりの方</a>で既に答えています。React のオブジェクトには「現在のディスパッチャ」とでも呼ぶべき、いま現在使われている実装（たとえば <code>react-dom</code>）を指すミュータブルな状態がありますが、それと似たように「現在のコンポーネント」という、ここなら <code>LikeButton</code> の内部データ構造を指すプロパティがあるのです。<code>useState</code> はそれによってなすべきことを知ります。</p>\n<p>慣れるまではみんな、明白な理由からこれを少し「汚く」感じるようです。共有のミュータブルな状態に依存するなんて「ふさわしくない」と。<em>（ところで、<code>try / catch</code> が JavaScript エンジンの中でどう実装されているか考えたことはありますか？）</em></p>\n<p>概念的には、しかし、<code>useState()</code> はコンポーネントの実行時に React がハンドリングするような <code>perform State()</code> であると考えることができます。これこそが React（あなたのコンポーネントを呼び出すものです）が、なぜ状態を提供できているのかの「説明」になるでしょう（コールスタックの上にあるおかげで、エフェクトハンドラを提供できるからです）。実際、私の見てきた Algebraic Effects のチュートリアルでは、<a href=\"https://github.com/ocamllabs/ocaml-effects-tutorial/#2-effectful-computations-in-a-pure-setting\">状態の実装</a> は最もよくある事例として紹介されています。</p>\n<p>もちろん改めて言いますが、JavaScript に Algebraic Effects がない以上、これは React の<em>本当の</em>挙動ではありません。その代わり、<code>useState</code> の実装が現在のディスパッチャを指すフィールドを持っていたのと同様に、現在のコンポーネントを覚えておくような隠れたフィールドが存在するだけです。もっと言えば、パフォーマンス最適化のために <code>useState</code> には <a href=\"https://github.com/facebook/react/blob/2c4d61e1022ae383dd11fe237f6df8451e6f0310/packages/react-reconciler/src/ReactFiberHooks.js#L1260-L1290\">マウント用と更新用</a>の実装が別れてすらいます。それでも、目を細めてみてください。一生懸命コードを眺めてみると、これが本質的にエフェクトハンドラであるように見えてくるかもしれませんよ。</p>\n<p>まとめると、JavaScript において <code>throw</code> することは IO エフェクトの大雑把な近似となります（コード自体が安全に再実行でき、かつ CPU バウンドでなければの話ですが）。そしてミュータブルな「ディスパッチャ」のフィールドを <code>try / finally</code> 内で復元することは、同期的なエフェクトハンドラの大雑把な近似となります。</p>\n<p>もっとずっと忠実に、エフェクトの実装を再現しようと思った場合は、<a href=\"https://dev.to/yelouafi/algebraic-effects-in-javascript-part-4---implementing-algebraic-effects-and-handlers-2703\">ジェネレータを使えば</a>実現できます。しかしこうすると JavaScript の関数が持つ「透明な」性質を諦める必要があり、つまりすべてのものをジェネレータで書かないといけなくなります。それはちょっと……ねぇ。</p>\n<h3>もっと詳しく学びたい人は</h3>\n<p>個人的には、Algebraic Effects がこんなにもすんなり理解できたことに驚きました。私はこれまで、例えばモナドのような抽象概念を理解するのに苦労してきたのですが、Algebraic Effects はただ「カチッと」ハマりました。この記事があなたにとってもカチッとハマる手助けになればと思います。</p>\n<p>これがメインストリームで採用されていくのかはわかりません。私としては、2025 年までにこれが流行っていなければがっかりするでしょうから、5 年後を楽しみにしていきたいですね！</p>\n<p>Algebraic Effects にできることはまだまだたくさんあると確信しています — しかし本当のパワーは実際にその方法でコードを書かないと、理解するのが難しいでしょう。この記事で興味を持った人は、気になりそうな資料をいくつか置いておきます。</p>\n<ul>\n<li><a href=\"https://github.com/ocamllabs/ocaml-effects-tutorial\">https://github.com/ocamllabs/ocaml-effects-tutorial</a></li>\n<li><a href=\"https://www.janestreet.com/tech-talks/effective-programming/\">https://www.janestreet.com/tech-talks/effective-programming/</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=hrBq8R_kxI0\">https://www.youtube.com/watch?v=hrBq8R_kxI0</a></li>\n</ul>\n<p>また多くの人が指摘していましたが、型付けの側面を無視すれば（この記事でもそうしたように）、Common Lisp の <a href=\"https://en.wikibooks.org/wiki/Common_Lisp/Advanced_topics/Condition_System\">コンディションシステム</a>を昔からの先行技術として挙げられます。James Long の<a href=\"https://jlongster.com/Whats-in-a-Continuation\">継続についての記事</a>は、<code>call/cc</code> プリミティブがいかにして、ユーザーランドにおいて復帰できる例外を作るための土台になるかを説明しているので読んでみると面白いでしょう。</p>\n<p>Algebraic Effects について、JavaScript をバックグラウンドにした人向けの良さそうな資料を見つけた人は、ぜひとも Twitter で知らせてください！</p>","timeToRead":21,"frontmatter":{"title":"我々向けの Algebraic Effects 入門","date":"July 21, 2019","spoiler":"ブリトーとは違うんですよ","cta":null},"fields":{"slug":"/ja/algebraic-effects-for-the-rest-of-us/","langKey":"ja"}}},"pageContext":{"slug":"/ja/algebraic-effects-for-the-rest-of-us/","translations":["zh-hans","ja","ko"],"translatedLinks":[]}},"staticQueryHashes":["336482444"]}