<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[The Chuong Chu's Overreacted Blog RSS Feed]]></title><description><![CDATA[Personal blog by me. I speak NLP]]></description><link>https://chuthechuong.github.io/thepapersnotread</link><generator>GatsbyJS</generator><lastBuildDate>Mon, 29 Mar 2021 16:19:02 GMT</lastBuildDate><item><title><![CDATA[First words of mine]]></title><description><![CDATA[Let clean code guide you. Then let it go.]]></description><link>https://chuthechuong.github.io/thepapersnotread/first-words/</link><guid isPermaLink="false">https://chuthechuong.github.io/thepapersnotread/first-words/</guid><pubDate>Mon, 29 Mar 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;a^2&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.8141079999999999em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.8141079999999999em;&quot;&gt;&lt;span style=&quot;top:-3.063em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
                &lt;div style=&quot;margin-top=55px; font-style: italic;&quot;&gt;(This is an article posted to my blog at overreacted.io. You can read it online by &lt;a href=&quot;https://chuthechuong.github.io/thepapersnotread/first-words/&quot;&gt;clicking here&lt;/a&gt;.)&lt;/div&gt;
              </content:encoded></item><item><title><![CDATA[Before You memo()]]></title><description><![CDATA[Rendering optimizations that come naturally.]]></description><link>https://chuthechuong.github.io/thepapersnotread/before-you-memo/</link><guid isPermaLink="false">https://chuthechuong.github.io/thepapersnotread/before-you-memo/</guid><pubDate>Tue, 23 Feb 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;There are many articles written about React performance optimizations. In general, if some state update is slow, you need to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Verify you&apos;re running a production build. (Development builds are intentionally slower, in extreme cases even by an order of magnitude.)&lt;/li&gt;
&lt;li&gt;Verify that you didn&apos;t put the state higher in the tree than necessary. (For example, putting input state in a centralized store might not be the best idea.)&lt;/li&gt;
&lt;li&gt;Run React DevTools Profiler to see what gets re-rendered, and wrap the most expensive subtrees with &lt;code&gt;memo()&lt;/code&gt;. (And add &lt;code&gt;useMemo()&lt;/code&gt; where needed.)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This last step is annoying, especially for components in between, and ideally a compiler would do it for you. In the future, it might.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In this post, I want to share two different techniques.&lt;/strong&gt; They&apos;re surprisingly basic, which is why people rarely realize they improve rendering performance.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;These techniques are complementary to what you already know!&lt;/strong&gt; They don&apos;t replace &lt;code&gt;memo&lt;/code&gt; or &lt;code&gt;useMemo&lt;/code&gt;, but they&apos;re often good to try first.&lt;/p&gt;
&lt;h2&gt;An (Artificially) Slow Component&lt;/h2&gt;
&lt;p&gt;Here&apos;s a component with a severe rendering performance problem:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import { useState } from &apos;react&apos;;

export default function App() {
  let [color, setColor] = useState(&apos;red&apos;);
  return (
    &amp;#x3C;div&gt;
      &amp;#x3C;input value={color} onChange={(e) =&gt; setColor(e.target.value)} /&gt;
      &amp;#x3C;p style={{ color }}&gt;Hello, world!&amp;#x3C;/p&gt;
      &amp;#x3C;ExpensiveTree /&gt;
    &amp;#x3C;/div&gt;
  );
}

function ExpensiveTree() {
  let now = performance.now();
  while (performance.now() - now &amp;#x3C; 100) {
    // Artificial delay -- do nothing for 100ms
  }
  return &amp;#x3C;p&gt;I am a very slow component tree.&amp;#x3C;/p&gt;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;(&lt;a href=&quot;https://codesandbox.io/s/frosty-glade-m33km?file=/src/App.js:23-513&quot;&gt;Try it here&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The problem is that whenever &lt;code&gt;color&lt;/code&gt; changes inside &lt;code&gt;App&lt;/code&gt;, we will re-render &lt;code&gt;&amp;#x3C;ExpensiveTree /&gt;&lt;/code&gt; which we&apos;ve artificially delayed to be very slow.&lt;/p&gt;
&lt;p&gt;I could &lt;a href=&quot;https://codesandbox.io/s/amazing-shtern-61tu4?file=/src/App.js&quot;&gt;put &lt;code&gt;memo()&lt;/code&gt; on it&lt;/a&gt; and call it a day, but there are many existing articles about it so I won&apos;t spend time on it. I want to show two different solutions.&lt;/p&gt;
&lt;h2&gt;Solution 1: Move State Down&lt;/h2&gt;
&lt;p&gt;If you look at the rendering code closer, you&apos;ll notice only a part of the returned tree actually cares about the current &lt;code&gt;color&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{2,5-6}&quot;&gt;export default function App() {
  let [color, setColor] = useState(&apos;red&apos;);
  return (
    &amp;#x3C;div&gt;
      &amp;#x3C;input value={color} onChange={(e) =&gt; setColor(e.target.value)} /&gt;
      &amp;#x3C;p style={{ color }}&gt;Hello, world!&amp;#x3C;/p&gt;
      &amp;#x3C;ExpensiveTree /&gt;
    &amp;#x3C;/div&gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So let&apos;s extract that part into a &lt;code&gt;Form&lt;/code&gt; component and move state &lt;em&gt;down&lt;/em&gt; into it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{4,11,14,15}&quot;&gt;export default function App() {
  return (
    &amp;#x3C;&gt;
      &amp;#x3C;Form /&gt;
      &amp;#x3C;ExpensiveTree /&gt;
    &amp;#x3C;/&gt;
  );
}

function Form() {
  let [color, setColor] = useState(&apos;red&apos;);
  return (
    &amp;#x3C;&gt;
      &amp;#x3C;input value={color} onChange={(e) =&gt; setColor(e.target.value)} /&gt;
      &amp;#x3C;p style={{ color }}&gt;Hello, world!&amp;#x3C;/p&gt;
    &amp;#x3C;/&gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;(&lt;a href=&quot;https://codesandbox.io/s/billowing-wood-1tq2u?file=/src/App.js:64-380&quot;&gt;Try it here&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Now if the &lt;code&gt;color&lt;/code&gt; changes, only the &lt;code&gt;Form&lt;/code&gt; re-renders. Problem solved.&lt;/p&gt;
&lt;h2&gt;Solution 2: Lift Content Up&lt;/h2&gt;
&lt;p&gt;The above solution doesn&apos;t work if the piece of state is used somewhere &lt;em&gt;above&lt;/em&gt; the expensive tree. For example, let&apos;s say we put the &lt;code&gt;color&lt;/code&gt; on the &lt;em&gt;parent&lt;/em&gt; &lt;code&gt;&amp;#x3C;div&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{2,4}&quot;&gt;export default function App() {
  let [color, setColor] = useState(&apos;red&apos;);
  return (
    &amp;#x3C;div style={{ color }}&gt;
      &amp;#x3C;input value={color} onChange={(e) =&gt; setColor(e.target.value)} /&gt;
      &amp;#x3C;p&gt;Hello, world!&amp;#x3C;/p&gt;
      &amp;#x3C;ExpensiveTree /&gt;
    &amp;#x3C;/div&gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;(&lt;a href=&quot;https://codesandbox.io/s/bold-dust-0jbg7?file=/src/App.js:58-313&quot;&gt;Try it here&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Now it seems like we can&apos;t just &quot;extract&quot; the parts that don&apos;t use &lt;code&gt;color&lt;/code&gt; into another component, since that would include the parent &lt;code&gt;&amp;#x3C;div&gt;&lt;/code&gt;, which would then include &lt;code&gt;&amp;#x3C;ExpensiveTree /&gt;&lt;/code&gt;. Can&apos;t avoid &lt;code&gt;memo&lt;/code&gt; this time, right?&lt;/p&gt;
&lt;p&gt;Or can we?&lt;/p&gt;
&lt;p&gt;Play with this sandbox and see if you can figure it out.&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;The answer is remarkably plain:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{4,5,10,15}&quot;&gt;export default function App() {
  return (
    &amp;#x3C;ColorPicker&gt;
      &amp;#x3C;p&gt;Hello, world!&amp;#x3C;/p&gt;
      &amp;#x3C;ExpensiveTree /&gt;
    &amp;#x3C;/ColorPicker&gt;
  );
}

function ColorPicker({ children }) {
  let [color, setColor] = useState(&quot;red&quot;);
  return (
    &amp;#x3C;div style={{ color }}&gt;
      &amp;#x3C;input value={color} onChange={(e) =&gt; setColor(e.target.value)} /&gt;
      {children}
    &amp;#x3C;/div&gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;(&lt;a href=&quot;https://codesandbox.io/s/wonderful-banach-tyfr1?file=/src/App.js:58-423&quot;&gt;Try it here&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We split the &lt;code&gt;App&lt;/code&gt; component in two. The parts that depend on the &lt;code&gt;color&lt;/code&gt;, together with the &lt;code&gt;color&lt;/code&gt; state variable itself, have moved into &lt;code&gt;ColorPicker&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The parts that don&apos;t care about the &lt;code&gt;color&lt;/code&gt; stayed in the &lt;code&gt;App&lt;/code&gt; component and are passed to &lt;code&gt;ColorPicker&lt;/code&gt; as JSX content, also known as the &lt;code&gt;children&lt;/code&gt; prop.&lt;/p&gt;
&lt;p&gt;When the &lt;code&gt;color&lt;/code&gt; changes, &lt;code&gt;ColorPicker&lt;/code&gt; re-renders. But it still has the same &lt;code&gt;children&lt;/code&gt; prop it got from the &lt;code&gt;App&lt;/code&gt; last time, so React doesn&apos;t visit that subtree.&lt;/p&gt;
&lt;p&gt;And as a result, &lt;code&gt;&amp;#x3C;ExpensiveTree /&gt;&lt;/code&gt; doesn&apos;t re-render.&lt;/p&gt;
&lt;h2&gt;What&apos;s the moral?&lt;/h2&gt;
&lt;p&gt;Before you apply optimizations like &lt;code&gt;memo&lt;/code&gt; or &lt;code&gt;useMemo&lt;/code&gt;, it might make sense to look if you can split the parts that change from the parts that don&apos;t change.&lt;/p&gt;
&lt;p&gt;The interesting part about these approaches is that &lt;strong&gt;they don&apos;t really have anything to do with performance, per se&lt;/strong&gt;. Using the &lt;code&gt;children&lt;/code&gt; prop to split up components usually makes the data flow of your application easier to follow and reduces the number of props plumbed down through the tree. Improved performance in cases like this is a cherry on top, not the end goal.&lt;/p&gt;
&lt;p&gt;Curiously, this pattern also unlocks &lt;em&gt;more&lt;/em&gt; performance benefits in the future.&lt;/p&gt;
&lt;p&gt;For example, when &lt;a href=&quot;https://reactjs.org/blog/2020/12/21/data-fetching-with-react-server-components.html&quot;&gt;Server Components&lt;/a&gt; are stable and ready for adoption, our &lt;code&gt;ColorPicker&lt;/code&gt; component could receive its &lt;code&gt;children&lt;/code&gt; &lt;a href=&quot;https://youtu.be/TQQPAU21ZUw?t=1314&quot;&gt;from the server&lt;/a&gt;. Either the whole &lt;code&gt;&amp;#x3C;ExpensiveTree /&gt;&lt;/code&gt; component or its parts could run on the server, and even a top-level React state update would &quot;skip over&quot; those parts on the client.&lt;/p&gt;
&lt;p&gt;That&apos;s something even &lt;code&gt;memo&lt;/code&gt; couldn&apos;t do! But again, both approaches are complementary. Don&apos;t neglect moving state down (and lifting content up!)&lt;/p&gt;
&lt;p&gt;Then, where it&apos;s not enough, use the Profiler and sprinkle those memo’s.&lt;/p&gt;
&lt;h2&gt;Didn&apos;t I read about this before?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://kentcdodds.com/blog/optimize-react-re-renders&quot;&gt;Yes, probably.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is not a new idea. It&apos;s a natural consequence of React composition model. It&apos;s simple enough that it&apos;s underappreciated, and deserves a bit more love.&lt;/p&gt;
                &lt;div style=&quot;margin-top=55px; font-style: italic;&quot;&gt;(This is an article posted to my blog at overreacted.io. You can read it online by &lt;a href=&quot;https://chuthechuong.github.io/thepapersnotread/before-you-memo/&quot;&gt;clicking here&lt;/a&gt;.)&lt;/div&gt;
              </content:encoded></item><item><title><![CDATA[Goodbye, Clean Code]]></title><description><![CDATA[Let clean code guide you. Then let it go.]]></description><link>https://chuthechuong.github.io/thepapersnotread/goodbye-clean-code/</link><guid isPermaLink="false">https://chuthechuong.github.io/thepapersnotread/goodbye-clean-code/</guid><pubDate>Sat, 11 Jan 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;It was a late evening.&lt;/p&gt;
&lt;p&gt;My colleague has just checked in the code that they&apos;ve been writing all week. We were working on a graphics editor canvas, and they implemented the ability to resize shapes like rectangles and ovals by dragging small handles at their edges.&lt;/p&gt;
&lt;p&gt;The code worked.&lt;/p&gt;
&lt;p&gt;But it was repetitive. Each shape (such as a rectangle or an oval) had a different set of handles, and dragging each handle in different directions affected the shape&apos;s position and size in a different way. If the user held Shift, we&apos;d also need to preserve proportions while resizing. There was a bunch of math.&lt;/p&gt;
&lt;p&gt;The code looked something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;let Rectangle = {
  resizeTopLeft(position, size, preserveAspect, dx, dy) {
    // 10 repetitive lines of math
  },
  resizeTopRight(position, size, preserveAspect, dx, dy) {
    // 10 repetitive lines of math
  },
  resizeBottomLeft(position, size, preserveAspect, dx, dy) {
    // 10 repetitive lines of math
  },
  resizeBottomRight(position, size, preserveAspect, dx, dy) {
    // 10 repetitive lines of math
  },
};

let Oval = {
  resizeLeft(position, size, preserveAspect, dx, dy) {
    // 10 repetitive lines of math
  },
  resizeRight(position, size, preserveAspect, dx, dy) {
    // 10 repetitive lines of math
  },
  resizeTop(position, size, preserveAspect, dx, dy) {
    // 10 repetitive lines of math
  },
  resizeBottom(position, size, preserveAspect, dx, dy) {
    // 10 repetitive lines of math
  },
};

let Header = {
  resizeLeft(position, size, preserveAspect, dx, dy) {
    // 10 repetitive lines of math
  },
  resizeRight(position, size, preserveAspect, dx, dy) {
    // 10 repetitive lines of math
  },  
}

let TextBlock = {
  resizeTopLeft(position, size, preserveAspect, dx, dy) {
    // 10 repetitive lines of math
  },
  resizeTopRight(position, size, preserveAspect, dx, dy) {
    // 10 repetitive lines of math
  },
  resizeBottomLeft(position, size, preserveAspect, dx, dy) {
    // 10 repetitive lines of math
  },
  resizeBottomRight(position, size, preserveAspect, dx, dy) {
    // 10 repetitive lines of math
  },
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That repetitive math was really bothering me.&lt;/p&gt;
&lt;p&gt;It wasn’t &lt;em&gt;clean&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Most of the repetition was between similar directions. For example, &lt;code&gt;Oval.resizeLeft()&lt;/code&gt; had similarities with &lt;code&gt;Header.resizeLeft()&lt;/code&gt;. This was because they both dealt with dragging the handle on the left side.&lt;/p&gt;
&lt;p&gt;The other similarity was between the methods for the same shape. For example, &lt;code&gt;Oval.resizeLeft()&lt;/code&gt; had similarities with the other &lt;code&gt;Oval&lt;/code&gt; methods. This was because they all dealt with ovals. There was also some duplication between &lt;code&gt;Rectangle&lt;/code&gt;, &lt;code&gt;Header&lt;/code&gt;, and &lt;code&gt;TextBlock&lt;/code&gt; because text blocks &lt;em&gt;were&lt;/em&gt; rectangles.&lt;/p&gt;
&lt;p&gt;I had an idea.&lt;/p&gt;
&lt;p&gt;We could &lt;em&gt;remove all duplication&lt;/em&gt; by grouping the code like this instead:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;let Directions = {
  top(...) {
    // 5 unique lines of math
  },
  left(...) {
    // 5 unique lines of math
  },
  bottom(...) {
    // 5 unique lines of math
  },
  right(...) {
    // 5 unique lines of math
  },
};

let Shapes = {
  Oval(...) {
    // 5 unique lines of math
  },
  Rectangle(...) {
    // 5 unique lines of math
  },
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and then composing their behaviors:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;let {top, bottom, left, right} = Directions;

function createHandle(directions) {
  // 20 lines of code
}

let fourCorners = [
  createHandle([top, left]),
  createHandle([top, right]),
  createHandle([bottom, left]),
  createHandle([bottom, right]),
];
let fourSides = [
  createHandle([top]),
  createHandle([left]),
  createHandle([right]),
  createHandle([bottom]),
];
let twoSides = [
  createHandle([left]),
  createHandle([right]),
];

function createBox(shape, handles) {
  // 20 lines of code
}

let Rectangle = createBox(Shapes.Rectangle, fourCorners);
let Oval = createBox(Shapes.Oval, fourSides);
let Header = createBox(Shapes.Rectangle, twoSides);
let TextBox = createBox(Shapes.Rectangle, fourCorners);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The code is half the total size, and the duplication is gone completely! So &lt;em&gt;clean&lt;/em&gt;. If we want to change the behavior for a particular direction or a shape, we could do it in a single place instead of updating methods all over the place.&lt;/p&gt;
&lt;p&gt;It was already late at night (I got carried away). I checked in my refactoring to master and went to bed, proud of how I untangled my colleague&apos;s messy code.&lt;/p&gt;
&lt;h2&gt;The Next Morning&lt;/h2&gt;
&lt;p&gt;... did not go as expected.&lt;/p&gt;
&lt;p&gt;My boss invited me for a one-on-one chat where they politely asked me to revert my change. I was aghast. The old code was a mess, and mine was &lt;em&gt;clean&lt;/em&gt;!&lt;/p&gt;
&lt;p&gt;I begrudgingly complied, but it took me years to see they were right.&lt;/p&gt;
&lt;h2&gt;It’s a Phase&lt;/h2&gt;
&lt;p&gt;Obsessing with &quot;clean code&quot; and removing duplication is a phase many of us go through. When we don&apos;t feel confident in our code, it is tempting to attach our sense of self-worth and professional pride to something that can be measured. A set of strict lint rules, a naming schema, a file structure, a lack of duplication.&lt;/p&gt;
&lt;p&gt;You can&apos;t automate removing duplication, but it &lt;em&gt;does&lt;/em&gt; get easier with practice. You can usually tell whether there&apos;s less or more of it after every change. As a result, removing duplication feels like improving some objective metric about the code. Worse, it messes with people&apos;s sense of identity: &lt;em&gt;&quot;I&apos;m the kind of person who writes clean code&quot;&lt;/em&gt;. It&apos;s as powerful as any sort of self-deception.&lt;/p&gt;
&lt;p&gt;Once we learn how to create &lt;a href=&quot;https://www.sandimetz.com/blog/2016/1/20/the-wrong-abstraction&quot;&gt;abstractions&lt;/a&gt;, it is tempting to get high on that ability, and pull abstractions out of thin air whenever we see repetitive code. After a few years of coding, we see repetition &lt;em&gt;everywhere&lt;/em&gt; -- and abstracting is our new superpower. If someone tells us that abstraction is a &lt;em&gt;virtue&lt;/em&gt;, we&apos;ll eat it. And we&apos;ll start judging other people for not worshipping &quot;cleanliness&quot;.&lt;/p&gt;
&lt;p&gt;I see now that my &quot;refactoring&quot; was a disaster in two ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Firstly, I didn&apos;t talk to the person who wrote it. I rewrote the code and checked it in without their input. Even if it &lt;em&gt;was&lt;/em&gt; an improvement (which I don&apos;t believe anymore), this is a terrible way to go about it. A healthy engineering team is constantly &lt;em&gt;building trust&lt;/em&gt;. Rewriting your teammate&apos;s code without a discussion is a huge blow to your ability to effectively collaborate on a codebase together.&lt;/li&gt;
&lt;li&gt;Secondly, nothing is free. My code traded the ability to change requirements for reduced duplication, and it was not a good trade. For example, we later needed many special cases and behaviors for different handles on different shapes. My abstraction would have to become several times more convoluted to afford that, whereas with the original &quot;messy&quot; version such changes stayed easy as cake.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Am I saying that you should write &quot;dirty&quot; code? No. I suggest to think deeply about what you mean when you say &quot;clean&quot; or &quot;dirty&quot;. Do you get a feeling of revolt? Righteousness? Beauty? Elegance? How sure are you that you can name the concrete engineering outcomes corresponding to those qualities? How exactly do they affect the way the code is written and &lt;a href=&quot;https://chuthechuong.github.io/thepapersnotread/thepapersnotread/optimized-for-change/&quot;&gt;modified&lt;/a&gt;?&lt;/p&gt;
&lt;p&gt;I sure didn&apos;t think deeply about any of those things. I thought a lot about how the code &lt;em&gt;looked&lt;/em&gt; -- but not about how it &lt;em&gt;evolved&lt;/em&gt; with a team of squishy humans.&lt;/p&gt;
&lt;p&gt;Coding is a journey. Think how far you came from your first line of code to where you are now. I reckon it was a joy to see for the first time how extracting a function or refactoring a class can make convoluted code simple. If you find pride in your craft, it is tempting to pursue cleanliness in code. Do it for a while.&lt;/p&gt;
&lt;p&gt;But don&apos;t stop there. Don&apos;t be a clean code zealot. Clean code is not a goal. It&apos;s an attempt to make some sense out of the immense complexity of systems we&apos;re dealing with. It&apos;s a defense mechanism when you&apos;re not yet sure how a change would affect the codebase but you need guidance in a sea of unknowns.&lt;/p&gt;
&lt;p&gt;Let clean code guide you. &lt;strong&gt;Then let it go.&lt;/strong&gt;&lt;/p&gt;
                &lt;div style=&quot;margin-top=55px; font-style: italic;&quot;&gt;(This is an article posted to my blog at overreacted.io. You can read it online by &lt;a href=&quot;https://chuthechuong.github.io/thepapersnotread/goodbye-clean-code/&quot;&gt;clicking here&lt;/a&gt;.)&lt;/div&gt;
              </content:encoded></item><item><title><![CDATA[Algebraic Effects for the Rest of Us]]></title><description><![CDATA[They’re not burritos.]]></description><link>https://chuthechuong.github.io/thepapersnotread/algebraic-effects-for-the-rest-of-us/</link><guid isPermaLink="false">https://chuthechuong.github.io/thepapersnotread/algebraic-effects-for-the-rest-of-us/</guid><pubDate>Sun, 21 Jul 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Have you heard about &lt;em&gt;algebraic effects&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;My first attempts to figure out what they are or why I should care about them were unsuccessful. I found a &lt;a href=&quot;https://www.eff-lang.org/handlers-tutorial.pdf&quot;&gt;few&lt;/a&gt; &lt;a href=&quot;https://www.microsoft.com/en-us/research/wp-content/uploads/2016/08/algeff-tr-2016-v2.pdf&quot;&gt;pdfs&lt;/a&gt; but they only confused me more. (There’s something about academic pdfs that makes me sleepy.)&lt;/p&gt;
&lt;p&gt;But my colleague Sebastian &lt;a href=&quot;https://mobile.twitter.com/sebmarkbage/status/763792452289343490&quot;&gt;kept&lt;/a&gt; &lt;a href=&quot;https://mobile.twitter.com/sebmarkbage/status/776883429400915968&quot;&gt;referring&lt;/a&gt; &lt;a href=&quot;https://mobile.twitter.com/sebmarkbage/status/776840575207116800&quot;&gt;to&lt;/a&gt; &lt;a href=&quot;https://mobile.twitter.com/sebmarkbage/status/969279885276454912&quot;&gt;them&lt;/a&gt; as a mental model for some things we do inside of React. (Sebastian works on the React team and came up with quite a few ideas, including Hooks and Suspense.) At some point, it became a running joke on the React team, with many of our conversations ending with:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./effects.jpg&quot; alt=&quot;&amp;#x22;Algebraic Effects&amp;#x22; caption on the &amp;#x22;Ancient Aliens&amp;#x22; guy meme&quot;&gt;&lt;/p&gt;
&lt;p&gt;It turned out that algebraic effects are a cool concept and not as scary as I thought from those pdfs. &lt;strong&gt;If you’re just using React, you don’t need to know anything about them — but if you’re feeling curious, like I was, read on.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(Disclaimer: I’m not a programming language researcher, and might have messed something up in my explanation. I am not an authority on this topic so let me know!)&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Not Production Ready Yet&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Algebraic Effects&lt;/em&gt; are a research programming language feature. This means that &lt;strong&gt;unlike &lt;code&gt;if&lt;/code&gt;, functions, or even &lt;code&gt;async / await&lt;/code&gt;, you probably can’t really use them in production yet.&lt;/strong&gt; They are only supported by a &lt;a href=&quot;https://www.eff-lang.org/&quot;&gt;few&lt;/a&gt; &lt;a href=&quot;https://www.microsoft.com/en-us/research/project/koka/&quot;&gt;languages&lt;/a&gt; that were created specifically to explore that idea. There is progress on productionizing them in OCaml which is... still &lt;a href=&quot;https://github.com/ocaml-multicore/ocaml-multicore/wiki&quot;&gt;ongoing&lt;/a&gt;. In other words, &lt;a href=&quot;https://www.youtube.com/watch?v=otCpCn0l4Wo&quot;&gt;Can’t Touch This&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Edit: a few people mentioned that LISP languages &lt;a href=&quot;#learn-more&quot;&gt;do offer something similar&lt;/a&gt;, so you can use it in production if you write LISP.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;So Why Should I Care?&lt;/h3&gt;
&lt;p&gt;Imagine that you’re writing code with &lt;code&gt;goto&lt;/code&gt;, and somebody shows you &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;for&lt;/code&gt; statements. Or maybe you’re deep in the callback hell, and somebody shows you &lt;code&gt;async / await&lt;/code&gt;. Pretty cool, huh?&lt;/p&gt;
&lt;p&gt;If you’re the kind of person who likes to learn about programming ideas several years before they hit the mainstream, it might be a good time to get curious about algebraic effects. Don’t feel like you &lt;em&gt;have to&lt;/em&gt; though. It is a bit like thinking about &lt;code&gt;async / await&lt;/code&gt; in 1999.&lt;/p&gt;
&lt;h3&gt;Okay, What Are Algebraic Effects?&lt;/h3&gt;
&lt;p&gt;The name might be a bit intimidating but the idea is simple. If you’re familiar with &lt;code&gt;try / catch&lt;/code&gt; blocks, you’ll figure out algebraic effects very fast.&lt;/p&gt;
&lt;p&gt;Let’s recap &lt;code&gt;try / catch&lt;/code&gt; first. Say you have a function that throws. Maybe there’s a bunch of functions between it and the &lt;code&gt;catch&lt;/code&gt; block:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{4,19}&quot;&gt;function getName(user) {
  let name = user.name;
  if (name === null) {
    throw new Error(&apos;A girl has no name&apos;);
  }
  return name;
}

function makeFriends(user1, user2) {
  user1.friendNames.push(getName(user2));
  user2.friendNames.push(getName(user1));
}

const arya = { name: null, friendNames: [] };
const gendry = { name: &apos;Gendry&apos;, friendNames: [] };
try {
  makeFriends(arya, gendry);
} catch (err) {
  console.log(&quot;Oops, that didn&apos;t work out: &quot;, err);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We &lt;code&gt;throw&lt;/code&gt; inside &lt;code&gt;getName&lt;/code&gt;, but it “bubbles” up right through &lt;code&gt;makeFriends&lt;/code&gt; to the closest &lt;code&gt;catch&lt;/code&gt; block. This is an important property of &lt;code&gt;try / catch&lt;/code&gt;. &lt;strong&gt;Things in the middle don’t need to concern themselves with error handling.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Unlike error codes in languages like C, with &lt;code&gt;try / catch&lt;/code&gt;, you don’t have to manually pass errors through every intermediate layer in the fear of losing them. They get propagated automatically.&lt;/p&gt;
&lt;h3&gt;What Does This Have to Do With Algebraic Effects?&lt;/h3&gt;
&lt;p&gt;In the above example, once we hit an error, we can’t continue. When we end up in the &lt;code&gt;catch&lt;/code&gt; block, there’s no way we can continue executing the original code.&lt;/p&gt;
&lt;p&gt;We’re done. It’s too late. The best we can do is to recover from a failure and maybe somehow retry what we were doing, but we can’t magically “go back” to where we were, and do something different. &lt;strong&gt;But with algebraic effects, &lt;em&gt;we can&lt;/em&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is an example written in a hypothetical JavaScript dialect (let’s call it ES2025 just for kicks) that lets us &lt;em&gt;recover&lt;/em&gt; from a missing &lt;code&gt;user.name&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{4,19-21}&quot;&gt;function getName(user) {
  let name = user.name;
  if (name === null) {
    name = perform &apos;ask_name&apos;;
  }
  return name;
}

function makeFriends(user1, user2) {
  user1.friendNames.push(getName(user2));
  user2.friendNames.push(getName(user1));
}

const arya = { name: null, friendNames: [] };
const gendry = { name: &apos;Gendry&apos;, friendNames: [] };
try {
  makeFriends(arya, gendry);
} handle (effect) {
  if (effect === &apos;ask_name&apos;) {
    resume with &apos;Arya Stark&apos;;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;(I apologize to all readers from 2025 who search the web for “ES2025” and find this article. If algebraic effects are a part of JavaScript by then, I’d be happy to update it!)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Instead of &lt;code&gt;throw&lt;/code&gt;, we use a hypothetical &lt;code&gt;perform&lt;/code&gt; keyword. Similarly, instead of &lt;code&gt;try / catch&lt;/code&gt;, we use a hypothetical &lt;code&gt;try / handle&lt;/code&gt;. &lt;strong&gt;The exact syntax doesn’t matter here — I just came up with something to illustrate the idea.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So what’s happening? Let’s take a closer look.&lt;/p&gt;
&lt;p&gt;Instead of throwing an error, we &lt;em&gt;perform an effect&lt;/em&gt;. Just like we can &lt;code&gt;throw&lt;/code&gt; any value, we can pass any value to &lt;code&gt;perform&lt;/code&gt;. In this example, I’m passing a string, but it could be an object, or any other data type:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{4}&quot;&gt;function getName(user) {
  let name = user.name;
  if (name === null) {
    name = perform &apos;ask_name&apos;;
  }
  return name;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When we &lt;code&gt;throw&lt;/code&gt; an error, the engine looks for the closest &lt;code&gt;try / catch&lt;/code&gt; error handler up the call stack. Similarly, when we &lt;code&gt;perform&lt;/code&gt; an effect, the engine would search for the closest &lt;code&gt;try / handle&lt;/code&gt; &lt;em&gt;effect handler&lt;/em&gt; up the call stack:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{3}&quot;&gt;try {
  makeFriends(arya, gendry);
} handle (effect) {
  if (effect === &apos;ask_name&apos;) {
    resume with &apos;Arya Stark&apos;;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This effect lets us decide how to handle the case where a name is missing. The novel part here (compared to exceptions) is the hypothetical &lt;code&gt;resume with&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{5}&quot;&gt;try {
  makeFriends(arya, gendry);
} handle (effect) {
  if (effect === &apos;ask_name&apos;) {
    resume with &apos;Arya Stark&apos;;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is the part you can’t do with &lt;code&gt;try / catch&lt;/code&gt;. It lets us &lt;strong&gt;jump back to where we performed the effect, and pass something back to it from the handler&lt;/strong&gt;. 🤯&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{4,6,16,18}&quot;&gt;function getName(user) {
  let name = user.name;
  if (name === null) {
    // 1. We perform an effect here
    name = perform &apos;ask_name&apos;;
    // 4. ...and end up back here (name is now &apos;Arya Stark&apos;)
  }
  return name;
}

// ...

try {
  makeFriends(arya, gendry);
} handle (effect) {
  // 2. We jump to the handler (like try/catch)
  if (effect === &apos;ask_name&apos;) {
    // 3. However, we can resume with a value (unlike try/catch!)
    resume with &apos;Arya Stark&apos;;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This takes a bit of time to get comfortable with, but it’s really not much different conceptually from a “resumable &lt;code&gt;try / catch&lt;/code&gt;”.&lt;/p&gt;
&lt;p&gt;Note, however, that &lt;strong&gt;algebraic effects are much more flexible than &lt;code&gt;try / catch&lt;/code&gt;, and recoverable errors are just one of many possible use cases.&lt;/strong&gt; I started with it only because I found it easiest to wrap my mind around it.&lt;/p&gt;
&lt;h3&gt;A Function Has No Color&lt;/h3&gt;
&lt;p&gt;Algebraic effects have interesting implications for asynchronous code.&lt;/p&gt;
&lt;p&gt;In languages with an &lt;code&gt;async / await&lt;/code&gt;, &lt;a href=&quot;https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/&quot;&gt;functions usually have a “color”&lt;/a&gt;. For example, in JavaScript we can’t just make &lt;code&gt;getName&lt;/code&gt; asynchronous without also “infecting” &lt;code&gt;makeFriends&lt;/code&gt; and its callers with being &lt;code&gt;async&lt;/code&gt;. This can be a real pain if &lt;em&gt;a piece of code sometimes needs to be sync, and sometimes needs to be async&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;// If we want to make this async...
async getName(user) {
  // ...
}

// Then this has to be async too...
async function makeFriends(user1, user2) {
  user1.friendNames.push(await getName(user2));
  user2.friendNames.push(await getName(user1));
}

// And so on...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;JavaScript generators are &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*&quot;&gt;similar&lt;/a&gt;: if you’re working with generators, things in the middle also have to be aware of generators.&lt;/p&gt;
&lt;p&gt;So how is that relevant?&lt;/p&gt;
&lt;p&gt;For a moment, let’s forget about &lt;code&gt;async / await&lt;/code&gt; and get back to our example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{4,19-21}&quot;&gt;function getName(user) {
  let name = user.name;
  if (name === null) {
    name = perform &apos;ask_name&apos;;
  }
  return name;
}

function makeFriends(user1, user2) {
  user1.friendNames.push(getName(user2));
  user2.friendNames.push(getName(user1));
}

const arya = { name: null, friendNames: [] };
const gendry = { name: &apos;Gendry&apos;, friendNames: [] };
try {
  makeFriends(arya, gendry);
} handle (effect) {
  if (effect === &apos;ask_name&apos;) {
    resume with &apos;Arya Stark&apos;;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What if our effect handler didn’t know the “fallback name” synchronously? What if we wanted to fetch it from a database?&lt;/p&gt;
&lt;p&gt;It turns out, we can call &lt;code&gt;resume with&lt;/code&gt; asynchronously from our effect handler without making any changes to &lt;code&gt;getName&lt;/code&gt; or &lt;code&gt;makeFriends&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{19-23}&quot;&gt;function getName(user) {
  let name = user.name;
  if (name === null) {
    name = perform &apos;ask_name&apos;;
  }
  return name;
}

function makeFriends(user1, user2) {
  user1.friendNames.push(getName(user2));
  user2.friendNames.push(getName(user1));
}

const arya = { name: null, friendNames: [] };
const gendry = { name: &apos;Gendry&apos;, friendNames: [] };
try {
  makeFriends(arya, gendry);
} handle (effect) {
  if (effect === &apos;ask_name&apos;) {
    setTimeout(() =&gt; {
      resume with &apos;Arya Stark&apos;;
    }, 1000);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, we don’t call &lt;code&gt;resume with&lt;/code&gt; until a second later. You can think of &lt;code&gt;resume with&lt;/code&gt; as a callback which you may only call once. (You can also impress your friends by calling it a “one-shot delimited continuation.”)&lt;/p&gt;
&lt;p&gt;Now the mechanics of algebraic effects should be a bit clearer. When we &lt;code&gt;throw&lt;/code&gt; an error, the JavaScript engine “unwinds the stack”, destroying local variables in the process. However, when we &lt;code&gt;perform&lt;/code&gt; an effect, our hypothetical engine would &lt;em&gt;create a callback&lt;/em&gt; with the rest of our function, and &lt;code&gt;resume with&lt;/code&gt; calls it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Again, a reminder: the concrete syntax and specific keywords are made up for this article. They’re not the point, the point is in the mechanics.&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;A Note on Purity&lt;/h3&gt;
&lt;p&gt;It’s worth noting that algebraic effects came out of functional programming research. Some of the problems they solve are unique to pure functional programming. For example, in languages that &lt;em&gt;don’t&lt;/em&gt; allow arbitrary side effects (like Haskell), you have to use concepts like Monads to wire effects through your program. If you ever read a Monad tutorial, you know they’re a bit tricky to think about. Algebraic effects help do something similar with less ceremony.&lt;/p&gt;
&lt;p&gt;This is why so much discussion about algebraic effects is incomprehensible to me. (I &lt;a href=&quot;https://chuthechuong.github.io/thepapersnotread/thepapersnotread/things-i-dont-know-as-of-2018/&quot;&gt;don’t know&lt;/a&gt; Haskell and friends.) However, I do think that even in an impure language like JavaScript, &lt;strong&gt;algebraic effects can be a very powerful instrument to separate the &lt;em&gt;what&lt;/em&gt; from the &lt;em&gt;how&lt;/em&gt; in the code.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;They let you write code that focuses on &lt;em&gt;what&lt;/em&gt; you’re doing:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{2,3,5,7,12}&quot;&gt;function enumerateFiles(dir) {
  const contents = perform OpenDirectory(dir);
  perform Log(&apos;Enumerating files in &apos;, dir);
  for (let file of contents.files) {
    perform HandleFile(file);
  }
  perform Log(&apos;Enumerating subdirectories in &apos;, dir);
  for (let directory of contents.dir) {
    // We can use recursion or call other functions with effects
    enumerateFiles(directory);
  }
  perform Log(&apos;Done&apos;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And later wrap it with something that specifies &lt;em&gt;how&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{6-7,9-11,13-14}&quot;&gt;let files = [];
try {
  enumerateFiles(&apos;C:\\&apos;);
} handle (effect) {
  if (effect instanceof Log) {
    myLoggingLibrary.log(effect.message);
    resume;
  } else if (effect instanceof OpenDirectory) {
    myFileSystemImpl.openDir(effect.dirName, (contents) =&gt; {
      resume with contents;
    });
  } else if (effect instanceof HandleFile) {
    files.push(effect.fileName);
    resume;
  }
}
// The `files` array now has all the files
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which means that those pieces can even become librarified:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import { withMyLoggingLibrary } from &apos;my-log&apos;;
import { withMyFileSystem } from &apos;my-fs&apos;;

function ourProgram() {
  enumerateFiles(&apos;C:\\&apos;);
}

withMyLoggingLibrary(() =&gt; {
  withMyFileSystem(() =&gt; {
    ourProgram();
  });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unlike &lt;code&gt;async / await&lt;/code&gt; or Generators, &lt;strong&gt;algebraic effects don’t require complicating functions “in the middle”&lt;/strong&gt;. Our &lt;code&gt;enumerateFiles&lt;/code&gt; call could be deep within &lt;code&gt;ourProgram&lt;/code&gt;, but as long as there’s an effect handler &lt;em&gt;somewhere above&lt;/em&gt; for each of the effects it may perform, our code would still work.&lt;/p&gt;
&lt;p&gt;Effect handlers let us decouple the program logic from its concrete effect implementations without too much ceremony or boilerplate code. For example, we could completely override the behavior in tests to use a fake filesystem and to snapshot logs instead of outputting them to the console:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{19-23}&quot;&gt;import { withFakeFileSystem } from &apos;fake-fs&apos;;

function withLogSnapshot(fn) {
  let logs = [];
  try {
    fn();
  } handle (effect) {
    if (effect instanceof Log) {
      logs.push(effect.message);
      resume;
    }
  }
  // Snapshot emitted logs.
  expect(logs).toMatchSnapshot();
}

test(&apos;my program&apos;, () =&gt; {
  const fakeFiles = [/* ... */];
  withFakeFileSystem(fakeFiles, () =&gt; {
    withLogSnapshot(() =&gt; {
      ourProgram();
    });
  });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because there is no &lt;a href=&quot;https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/&quot;&gt;“function color”&lt;/a&gt; (code in the middle doesn’t need to be aware of effects) and effect handlers are &lt;em&gt;composable&lt;/em&gt; (you can nest them), you can create very expressive abstractions with them.&lt;/p&gt;
&lt;h3&gt;A Note on Types&lt;/h3&gt;
&lt;p&gt;Because algebraic effects are coming from statically typed languages, much of the debate about them centers on the ways they can be expressed in types. This is no doubt important but can also make it challenging to grasp the concept. That’s why this article doesn’t talk about types at all. However, I should note that usually the fact that a function can perform an effect would be encoded into its type signature. So you shouldn’t end up in a situation where random effects are happening and you can’t trace where they’re coming from.&lt;/p&gt;
&lt;p&gt;You might argue that algebraic effects technically do &lt;a href=&quot;https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/&quot;&gt;“give color”&lt;/a&gt; to functions in statically typed languages because effects are a part of the type signature. That’s true. However, fixing a type annotation for an intermediate function to include a new effect is not by itself a semantic change — unlike adding &lt;code&gt;async&lt;/code&gt; or turning a function into a generator. Inference can also help avoid cascading changes. An important difference is you can “bottle up” an effect by providing a noop or a mock implementation (for example, a sync call for an async effect), which lets you prevent it from reaching the outer code if necessary — or turn it into a different effect.&lt;/p&gt;
&lt;h3&gt;Should We Add Algebraic Effects to JavaScript?&lt;/h3&gt;
&lt;p&gt;Honestly, I don’t know. They are very powerful, and you can make an argument that they might be &lt;em&gt;too&lt;/em&gt; powerful for a language like JavaScript.&lt;/p&gt;
&lt;p&gt;I think they could be a great fit for a language where mutation is uncommon, and where the standard library fully embraced effects. If you primarily do &lt;code&gt;perform Timeout(1000)&lt;/code&gt;, &lt;code&gt;perform Fetch(&apos;http://google.com&apos;)&lt;/code&gt;, and &lt;code&gt;perform ReadFile(&apos;file.txt&apos;)&lt;/code&gt;, and your language has pattern matching and static typing for effects, it might be a very nice programming environment.&lt;/p&gt;
&lt;p&gt;Maybe that language could even compile to JavaScript!&lt;/p&gt;
&lt;h3&gt;How Is All of This Relevant to React?&lt;/h3&gt;
&lt;p&gt;Not that much. You can even say it’s a stretch.&lt;/p&gt;
&lt;p&gt;If you watched &lt;a href=&quot;https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html&quot;&gt;my talk about Time Slicing and Suspense&lt;/a&gt;, the second part involves components reading data from a cache:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;function MovieDetails({ id }) {
  // What if it&apos;s still being fetched?
  const movie = movieCache.read(id);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;(The talk uses a slightly different API but that’s not the point.)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This builds on a React feature called “Suspense”, which is in active development for the data fetching use case. The interesting part, of course, is that the data might not yet be in the &lt;code&gt;movieCache&lt;/code&gt; — in which case we need to do &lt;em&gt;something&lt;/em&gt; because we can’t proceed below. Technically, in that case the &lt;code&gt;read()&lt;/code&gt; call throws a Promise (yes, &lt;em&gt;throws&lt;/em&gt; a Promise — let that sink in). This “suspends” the execution. React catches that Promise, and remembers to retry rendering the component tree after the thrown Promise resolves.&lt;/p&gt;
&lt;p&gt;This isn’t an algebraic effect per se, even though this trick was &lt;a href=&quot;https://mobile.twitter.com/sebmarkbage/status/941214259505119232&quot;&gt;inspired&lt;/a&gt; by them. But it achieves the same goal: some code below in the call stack yields to something above in the call stack (React, in this case) without all the intermediate functions necessarily knowing about it or being “poisoned” by &lt;code&gt;async&lt;/code&gt; or generators. Of course, we can’t really &lt;em&gt;resume&lt;/em&gt; execution in JavaScript later, but from React’s point of view, re-rendering a component tree when the Promise resolves is pretty much the same thing. You can cheat when your programming model &lt;a href=&quot;https://chuthechuong.github.io/thepapersnotread/thepapersnotread/react-as-a-ui-runtime/#purity&quot;&gt;assumes idempotence&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://reactjs.org/docs/hooks-intro.html&quot;&gt;Hooks&lt;/a&gt; are another example that might remind you of algebraic effects. One of the first questions that people ask is: how can a &lt;code&gt;useState&lt;/code&gt; call possibly know which component it refers to?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;function LikeButton() {
  // How does useState know which component it&apos;s in?
  const [isLiked, setIsLiked] = useState(false);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I already explained the answer &lt;a href=&quot;https://chuthechuong.github.io/thepapersnotread/thepapersnotread/how-does-setstate-know-what-to-do/&quot;&gt;near the end of this article&lt;/a&gt;: there is a “current dispatcher” mutable state on the React object which points to the implementation you’re using right now (such as the one in &lt;code&gt;react-dom&lt;/code&gt;). There is similarly a “current component” property that points to our &lt;code&gt;LikeButton&lt;/code&gt;’s internal data structure. That’s how &lt;code&gt;useState&lt;/code&gt; knows what to do.&lt;/p&gt;
&lt;p&gt;Before people get used to it, they often think it’s a bit “dirty” for an obvious reason. It doesn’t “feel right” to rely on shared mutable state. &lt;em&gt;(Side note: how do you think &lt;code&gt;try / catch&lt;/code&gt; is implemented in a JavaScript engine?)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;However, conceptually you can think of &lt;code&gt;useState()&lt;/code&gt; as of being a &lt;code&gt;perform State()&lt;/code&gt; effect which is handled by React when executing your component. That would “explain” why React (the thing calling your component) can provide state to it (it’s above in the call stack, so it can provide the effect handler). Indeed, &lt;a href=&quot;https://github.com/ocamllabs/ocaml-effects-tutorial/#2-effectful-computations-in-a-pure-setting&quot;&gt;implementing state&lt;/a&gt; is one of the most common examples in the algebraic effect tutorials I’ve encountered.&lt;/p&gt;
&lt;p&gt;Again, of course, that’s not how React &lt;em&gt;actually&lt;/em&gt; works because we don’t have algebraic effects in JavaScript. Instead, there is a hidden field where we keep the current component, as well as a field that points to the current “dispatcher” with the &lt;code&gt;useState&lt;/code&gt; implementation. As a performance optimization, there are even separate &lt;code&gt;useState&lt;/code&gt; implementations &lt;a href=&quot;https://github.com/facebook/react/blob/2c4d61e1022ae383dd11fe237f6df8451e6f0310/packages/react-reconciler/src/ReactFiberHooks.js#L1260-L1290&quot;&gt;for mounts and updates&lt;/a&gt;. But if you squint at this code very hard, you might see them as essentially effect handlers.&lt;/p&gt;
&lt;p&gt;To sum up, in JavaScript, throwing can serve as a crude approximation for IO effects (as long as it’s safe to re-execute the code later, and as long as it’s not CPU-bound), and having a mutable “dispatcher” field that’s restored in &lt;code&gt;try / finally&lt;/code&gt; can serve as a crude approximation for synchronous effect handlers.&lt;/p&gt;
&lt;p&gt;You can also get a much higher fidelity effect implementation &lt;a href=&quot;https://dev.to/yelouafi/algebraic-effects-in-javascript-part-4---implementing-algebraic-effects-and-handlers-2703&quot;&gt;with generators&lt;/a&gt; but that means you’ll have to give up on the “transparent” nature of JavaScript functions and you’ll have to make everything a generator. Which is... yeah.&lt;/p&gt;
&lt;h3&gt;Learn More&lt;/h3&gt;
&lt;p&gt;Personally, I was surprised by how much algebraic effects made sense to me. I always struggled understanding abstract concepts like Monads, but Algebraic Effects just “clicked”. I hope this article will help them “click” for you too.&lt;/p&gt;
&lt;p&gt;I don’t know if they’re ever going to reach mainstream adoption. I think I’ll be disappointed if they don’t catch on in any mainstream language by 2025. Remind me to check back in five years!&lt;/p&gt;
&lt;p&gt;I’m sure there’s so much more you can do with them — but it’s really difficult to get a sense of their power without actually writing code this way. If this post made you curious, here’s a few more resources you might want to check out:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ocamllabs/ocaml-effects-tutorial&quot;&gt;https://github.com/ocamllabs/ocaml-effects-tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.janestreet.com/tech-talks/effective-programming/&quot;&gt;https://www.janestreet.com/tech-talks/effective-programming/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=hrBq8R_kxI0&quot;&gt;https://www.youtube.com/watch?v=hrBq8R_kxI0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Many people also pointed out that if you omit the typing aspects (as I did in this article), you can find much earlier prior art for this in the &lt;a href=&quot;https://en.wikibooks.org/wiki/Common_Lisp/Advanced_topics/Condition_System&quot;&gt;condition system&lt;/a&gt; in Common Lisp. You might also enjoy reading James Long’s &lt;a href=&quot;https://jlongster.com/Whats-in-a-Continuation&quot;&gt;post on continuations&lt;/a&gt; that explains how the &lt;code&gt;call/cc&lt;/code&gt; primitive can also serve as a foundation for building resumable exceptions in userland.&lt;/p&gt;
&lt;p&gt;If you find other useful resources on algebraic effects for people with JavaScript background, please let me know on Twitter!&lt;/p&gt;
                &lt;div style=&quot;margin-top=55px; font-style: italic;&quot;&gt;(This is an article posted to my blog at overreacted.io. You can read it online by &lt;a href=&quot;https://chuthechuong.github.io/thepapersnotread/algebraic-effects-for-the-rest-of-us/&quot;&gt;clicking here&lt;/a&gt;.)&lt;/div&gt;
              </content:encoded></item><item><title><![CDATA[A Complete Guide to useEffect]]></title><description><![CDATA[Effects are a part of your data flow.]]></description><link>https://chuthechuong.github.io/thepapersnotread/a-complete-guide-to-useeffect/</link><guid isPermaLink="false">https://chuthechuong.github.io/thepapersnotread/a-complete-guide-to-useeffect/</guid><pubDate>Sat, 09 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;You wrote a few components with &lt;a href=&quot;https://reactjs.org/docs/hooks-intro.html&quot;&gt;Hooks&lt;/a&gt;. Maybe even a small app. You’re mostly satisfied. You’re comfortable with the API and picked up a few tricks along the way. You even made some &lt;a href=&quot;https://reactjs.org/docs/hooks-custom.html&quot;&gt;custom Hooks&lt;/a&gt; to extract repetitive logic (300 lines gone!) and showed it off to your colleagues. “Great job”, they said.&lt;/p&gt;
&lt;p&gt;But sometimes when you &lt;code&gt;useEffect&lt;/code&gt;, the pieces don’t quite fit together. You have a nagging feeling that you’re missing something. It seems similar to class lifecycles... but is it really? You find yourself asking questions like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;🤔 How do I replicate &lt;code&gt;componentDidMount&lt;/code&gt; with &lt;code&gt;useEffect&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;🤔 How do I correctly fetch data inside &lt;code&gt;useEffect&lt;/code&gt;? What is &lt;code&gt;[]&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;🤔 Do I need to specify functions as effect dependencies or not?&lt;/li&gt;
&lt;li&gt;🤔 Why do I sometimes get an infinite refetching loop?&lt;/li&gt;
&lt;li&gt;🤔 Why do I sometimes get an old state or prop value inside my effect?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When I just started using Hooks, I was confused by all of those questions too. Even when writing the initial docs, I didn’t have a firm grasp on some of the subtleties. I’ve since had a few “aha” moments that I want to share with you. &lt;strong&gt;This deep dive will make the answers to these questions look obvious to you.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To &lt;em&gt;see&lt;/em&gt; the answers, we need to take a step back. The goal of this article isn’t to give you a list of bullet point recipes. It’s to help you truly “grok” &lt;code&gt;useEffect&lt;/code&gt;. There won’t be much to learn. In fact, we’ll spend most of our time &lt;em&gt;un&lt;/em&gt;learning.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;It’s only after I stopped looking at the &lt;code&gt;useEffect&lt;/code&gt; Hook through the prism of the familiar class lifecycle methods that everything came together for me.&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Unlearn what you have learned.” — Yoda&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;./yoda.jpg&quot; alt=&quot;Yoda sniffing the air. Caption: “I smell bacon.”&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;This article assumes that you’re somewhat familiar with &lt;a href=&quot;https://reactjs.org/docs/hooks-effect.html&quot;&gt;&lt;code&gt;useEffect&lt;/code&gt;&lt;/a&gt; API.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;It’s also &lt;em&gt;really&lt;/em&gt; long. It’s like a mini-book. That’s just my preferred format. But I wrote a TLDR just below if you’re in a rush or don’t really care.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you’re not comfortable with deep dives, you might want to wait until these explanations appear elsewhere. Just like when React came out in 2013, it will take some time for people to recognize a different mental model and teach it.&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;TLDR&lt;/h2&gt;
&lt;p&gt;Here’s a quick TLDR if you don’t want to read the whole thing. If some parts don’t make sense, you can scroll down until you find something related.&lt;/p&gt;
&lt;p&gt;Feel free to skip it if you plan to read the whole post. I’ll link to it at the end.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;🤔 Question: How do I replicate &lt;code&gt;componentDidMount&lt;/code&gt; with &lt;code&gt;useEffect&lt;/code&gt;?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;While you can &lt;code&gt;useEffect(fn, [])&lt;/code&gt;, it’s not an exact equivalent. Unlike &lt;code&gt;componentDidMount&lt;/code&gt;, it will &lt;em&gt;capture&lt;/em&gt; props and state. So even inside the callbacks, you’ll see the initial props and state. If you want to see “latest” something, you can write it to a ref. But there’s usually a simpler way to structure the code so that you don’t have to. Keep in mind that the mental model for effects is different from &lt;code&gt;componentDidMount&lt;/code&gt; and other lifecycles, and trying to find their exact equivalents may confuse you more than help. To get productive, you need to “think in effects”, and their mental model is closer to implementing synchronization than to responding to lifecycle events.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;🤔 Question:  How do I correctly fetch data inside &lt;code&gt;useEffect&lt;/code&gt;? What is &lt;code&gt;[]&lt;/code&gt;?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.robinwieruch.de/react-hooks-fetch-data/&quot;&gt;This article&lt;/a&gt; is a good primer on data fetching with &lt;code&gt;useEffect&lt;/code&gt;. Make sure to read it to the end! It’s not as long as this one. &lt;code&gt;[]&lt;/code&gt; means the effect doesn’t use any value that participates in React data flow, and is for that reason safe to apply once. It is also a common source of bugs when the value actually &lt;em&gt;is&lt;/em&gt; used. You’ll need to learn a few strategies (primarily &lt;code&gt;useReducer&lt;/code&gt; and &lt;code&gt;useCallback&lt;/code&gt;) that can &lt;em&gt;remove the need&lt;/em&gt; for a dependency instead of incorrectly omitting it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;🤔 Question: Do I need to specify functions as effect dependencies or not?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The recommendation is to hoist functions that don’t need props or state &lt;em&gt;outside&lt;/em&gt; of your component, and pull the ones that are used only by an effect &lt;em&gt;inside&lt;/em&gt; of that effect.  If after that your effect still ends up using functions in the render scope (including function from props), wrap them into &lt;code&gt;useCallback&lt;/code&gt; where they’re defined, and repeat the process. Why does it matter? Functions can “see” values from props and state — so they participate in the data flow. There&apos;s a &lt;a href=&quot;https://reactjs.org/docs/hooks-faq.html#is-it-safe-to-omit-functions-from-the-list-of-dependencies&quot;&gt;more detailed answer&lt;/a&gt; in our FAQ.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;🤔 Question: Why do I sometimes get an infinite refetching loop?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This can happen if you’re doing data fetching in an effect without the second dependencies argument. Without it, effects run after every render — and setting the state will trigger the effects again. An infinite loop may also happen if you specify a value that &lt;em&gt;always&lt;/em&gt; changes in the dependency array. You can tell which one by removing them one by one. However, removing a dependency you use (or blindly specifying &lt;code&gt;[]&lt;/code&gt;) is usually the wrong fix. Instead, fix the problem at its source. For example, functions can cause this problem, and putting them inside effects, hoisting them out, or wrapping them with &lt;code&gt;useCallback&lt;/code&gt; helps. To avoid recreating objects, &lt;code&gt;useMemo&lt;/code&gt; can serve a similar purpose.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;🤔 Why do I sometimes get an old state or prop value inside my effect?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Effects always “see” props and state from the render they were defined in. That &lt;a href=&quot;https://chuthechuong.github.io/thepapersnotread/thepapersnotread/how-are-function-components-different-from-classes/&quot;&gt;helps prevent bugs&lt;/a&gt; but in some cases can be annoying. For those cases, you can explicitly maintain some value in a mutable ref (the linked article explains it at the end). If you think you’re seeing some props or state from an old render but don’t expect it, you probably missed some dependencies. Try using the &lt;a href=&quot;https://github.com/facebook/react/issues/14920&quot;&gt;lint rule&lt;/a&gt; to train yourself to see them. A few days, and it’ll be like a second nature to you. See also &lt;a href=&quot;https://reactjs.org/docs/hooks-faq.html#why-am-i-seeing-stale-props-or-state-inside-my-function&quot;&gt;this answer&lt;/a&gt; in our FAQ.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I hope this TLDR was helpful! Otherwise, let’s go.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Each Render Has Its Own Props and State&lt;/h2&gt;
&lt;p&gt;Before we can talk about effects, we need to talk about rendering.&lt;/p&gt;
&lt;p&gt;Here’s a counter. Look at the highlighted line closely:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{6}&quot;&gt;function Counter() {
  const [count, setCount] = useState(0);

  return (
    &amp;#x3C;div&gt;
      &amp;#x3C;p&gt;You clicked {count} times&amp;#x3C;/p&gt;
      &amp;#x3C;button onClick={() =&gt; setCount(count + 1)}&gt;
        Click me
      &amp;#x3C;/button&gt;
    &amp;#x3C;/div&gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What does it mean? Does &lt;code&gt;count&lt;/code&gt; somehow “watch” changes to our state and update automatically? That might be a useful first intuition when you learn React but it’s &lt;em&gt;not&lt;/em&gt; an &lt;a href=&quot;https://overreacted.io/react-as-a-ui-runtime/&quot;&gt;accurate mental model&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In this example, &lt;code&gt;count&lt;/code&gt; is just a number.&lt;/strong&gt; It’s not a magic “data binding”, a “watcher”, a “proxy”, or anything else. It’s a good old number like this one:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const count = 42;
// ...
&amp;#x3C;p&gt;You clicked {count} times&amp;#x3C;/p&gt;
// ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first time our component renders, the &lt;code&gt;count&lt;/code&gt; variable we get from &lt;code&gt;useState()&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;. When we call &lt;code&gt;setCount(1)&lt;/code&gt;, React calls our component again. This time, &lt;code&gt;count&lt;/code&gt; will be &lt;code&gt;1&lt;/code&gt;. And so on:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{3,11,19}&quot;&gt;// During first render
function Counter() {
  const count = 0; // Returned by useState()
  // ...
  &amp;#x3C;p&gt;You clicked {count} times&amp;#x3C;/p&gt;
  // ...
}

// After a click, our function is called again
function Counter() {
  const count = 1; // Returned by useState()
  // ...
  &amp;#x3C;p&gt;You clicked {count} times&amp;#x3C;/p&gt;
  // ...
}

// After another click, our function is called again
function Counter() {
  const count = 2; // Returned by useState()
  // ...
  &amp;#x3C;p&gt;You clicked {count} times&amp;#x3C;/p&gt;
  // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Whenever we update the state, React calls our component. Each render result “sees” its own &lt;code&gt;counter&lt;/code&gt; state value which is a &lt;em&gt;constant&lt;/em&gt; inside our function.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So this line doesn’t do any special data binding:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;#x3C;p&gt;You clicked {count} times&amp;#x3C;/p&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;It only embeds a number value into the render output.&lt;/strong&gt; That number is provided by React. When we &lt;code&gt;setCount&lt;/code&gt;, React calls our component again with a different &lt;code&gt;count&lt;/code&gt; value. Then React updates the DOM to match our latest render output.&lt;/p&gt;
&lt;p&gt;The key takeaway is that the &lt;code&gt;count&lt;/code&gt; constant inside any particular render doesn’t change over time. It’s our component that’s called again — and each render “sees” its own &lt;code&gt;count&lt;/code&gt; value that’s isolated between renders.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(For an in-depth overview of this process, check out my post &lt;a href=&quot;https://overreacted.io/react-as-a-ui-runtime/&quot;&gt;React as a UI Runtime&lt;/a&gt;.)&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Each Render Has Its Own Event Handlers&lt;/h2&gt;
&lt;p&gt;So far so good. What about event handlers?&lt;/p&gt;
&lt;p&gt;Look at this example. It shows an alert with the &lt;code&gt;count&lt;/code&gt; after three seconds:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{4-8,16-18}&quot;&gt;function Counter() {
  const [count, setCount] = useState(0);

  function handleAlertClick() {
    setTimeout(() =&gt; {
      alert(&apos;You clicked on: &apos; + count);
    }, 3000);
  }

  return (
    &amp;#x3C;div&gt;
      &amp;#x3C;p&gt;You clicked {count} times&amp;#x3C;/p&gt;
      &amp;#x3C;button onClick={() =&gt; setCount(count + 1)}&gt;
        Click me
      &amp;#x3C;/button&gt;
      &amp;#x3C;button onClick={handleAlertClick}&gt;
        Show alert
      &amp;#x3C;/button&gt;
    &amp;#x3C;/div&gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s say I do this sequence of steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Increment&lt;/strong&gt; the counter to 3&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Press&lt;/strong&gt; “Show alert”&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Increment&lt;/strong&gt; it to 5 before the timeout fires&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;./counter.gif&quot; alt=&quot;Counter demo&quot;&gt;&lt;/p&gt;
&lt;p&gt;What do you expect the alert to show? Will it show 5 — which is the counter state at the time of the alert? Or will it show 3 — the state when I clicked?&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;spoilers ahead&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Go ahead and &lt;a href=&quot;https://codesandbox.io/s/w2wxl3yo0l&quot;&gt;try it yourself!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If the behavior doesn’t quite make sense to you, imagine a more practical example: a chat app with the current recipient ID in the state, and a Send button. &lt;a href=&quot;https://overreacted.io/how-are-function-components-different-from-classes/&quot;&gt;This article&lt;/a&gt; explores the reasons in depth but the correct answer is 3.&lt;/p&gt;
&lt;p&gt;The alert will “capture” the state at the time I clicked the button.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(There are ways to implement the other behavior too but I’ll be focusing on the default case for now. When building a mental model, it’s important that we distinguish the “path of least resistance” from the opt-in escape hatches.)&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;But how does it work?&lt;/p&gt;
&lt;p&gt;We’ve discussed that the &lt;code&gt;count&lt;/code&gt; value is constant for every particular call to our function. It’s worth emphasizing this — &lt;strong&gt;our function gets called many times (once per each render), but every one of those times the &lt;code&gt;count&lt;/code&gt; value inside of it is constant and set to a particular value (state for that render).&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is not specific to React — regular functions work in a similar way:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{2}&quot;&gt;function sayHi(person) {
  const name = person.name;
  setTimeout(() =&gt; {
    alert(&apos;Hello, &apos; + name);
  }, 3000);
}

let someone = {name: &apos;Dan&apos;};
sayHi(someone);

someone = {name: &apos;Yuzhi&apos;};
sayHi(someone);

someone = {name: &apos;Dominic&apos;};
sayHi(someone);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In &lt;a href=&quot;https://codesandbox.io/s/mm6ww11lk8&quot;&gt;this example&lt;/a&gt;, the outer &lt;code&gt;someone&lt;/code&gt; variable is reassigned several times. (Just like somewhere in React, the &lt;em&gt;current&lt;/em&gt; component state can change.) &lt;strong&gt;However, inside &lt;code&gt;sayHi&lt;/code&gt;, there is a local &lt;code&gt;name&lt;/code&gt; constant that is associated with a &lt;code&gt;person&lt;/code&gt; from a particular call.&lt;/strong&gt; That constant is local, so it’s isolated between the calls! As a result, when the timeouts fire, each alert “remembers” its own &lt;code&gt;name&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This explains how our event handler captures the &lt;code&gt;count&lt;/code&gt; at the time of the click. If we apply the same substitution principle, each render “sees” its own &lt;code&gt;count&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{3,15,27}&quot;&gt;// During first render
function Counter() {
  const count = 0; // Returned by useState()
  // ...
  function handleAlertClick() {
    setTimeout(() =&gt; {
      alert(&apos;You clicked on: &apos; + count);
    }, 3000);
  }
  // ...
}

// After a click, our function is called again
function Counter() {
  const count = 1; // Returned by useState()
  // ...
  function handleAlertClick() {
    setTimeout(() =&gt; {
      alert(&apos;You clicked on: &apos; + count);
    }, 3000);
  }
  // ...
}

// After another click, our function is called again
function Counter() {
  const count = 2; // Returned by useState()
  // ...
  function handleAlertClick() {
    setTimeout(() =&gt; {
      alert(&apos;You clicked on: &apos; + count);
    }, 3000);
  }
  // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So effectively, each render returns its own “version” of &lt;code&gt;handleAlertClick&lt;/code&gt;. Each of those versions “remembers” its own &lt;code&gt;count&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{6,10,19,23,32,36}&quot;&gt;// During first render
function Counter() {
  // ...
  function handleAlertClick() {
    setTimeout(() =&gt; {
      alert(&apos;You clicked on: &apos; + 0);
    }, 3000);
  }
  // ...
  &amp;#x3C;button onClick={handleAlertClick} /&gt; // The one with 0 inside
  // ...
}

// After a click, our function is called again
function Counter() {
  // ...
  function handleAlertClick() {
    setTimeout(() =&gt; {
      alert(&apos;You clicked on: &apos; + 1);
    }, 3000);
  }
  // ...
  &amp;#x3C;button onClick={handleAlertClick} /&gt; // The one with 1 inside
  // ...
}

// After another click, our function is called again
function Counter() {
  // ...
  function handleAlertClick() {
    setTimeout(() =&gt; {
      alert(&apos;You clicked on: &apos; + 2);
    }, 3000);
  }
  // ...
  &amp;#x3C;button onClick={handleAlertClick} /&gt; // The one with 2 inside
  // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is why &lt;a href=&quot;https://codesandbox.io/s/w2wxl3yo0l&quot;&gt;in this demo&lt;/a&gt; event handlers “belong” to a particular render, and when you click, it keeps using the &lt;code&gt;counter&lt;/code&gt; state &lt;em&gt;from&lt;/em&gt; that render.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Inside any particular render, props and state forever stay the same.&lt;/strong&gt; But if props and state are isolated between renders, so are any values using them (including the event handlers). They also “belong” to a particular render. So even async functions inside an event handler will “see” the same &lt;code&gt;count&lt;/code&gt; value.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Side note: I inlined concrete &lt;code&gt;count&lt;/code&gt; values right into &lt;code&gt;handleAlertClick&lt;/code&gt; functions above. This mental substitution is safe because &lt;code&gt;count&lt;/code&gt; can’t possibly change within a particular render. It’s declared as a &lt;code&gt;const&lt;/code&gt; and is a number. It would be safe to think the same way about other values like objects too, but only if we agree to avoid mutating state. Calling &lt;code&gt;setSomething(newObj)&lt;/code&gt; with a newly created object instead of mutating it is fine because state belonging to previous renders is intact.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Each Render Has Its Own Effects&lt;/h2&gt;
&lt;p&gt;This was supposed to be a post about effects but we still haven’t talked about effects yet! We’ll rectify this now. Turns out, effects aren’t really any different.&lt;/p&gt;
&lt;p&gt;Let’s go back to an example from &lt;a href=&quot;https://reactjs.org/docs/hooks-effect.html&quot;&gt;the docs&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{4-6}&quot;&gt;function Counter() {
  const [count, setCount] = useState(0);

  useEffect(() =&gt; {
    document.title = `You clicked ${count} times`;
  });

  return (
    &amp;#x3C;div&gt;
      &amp;#x3C;p&gt;You clicked {count} times&amp;#x3C;/p&gt;
      &amp;#x3C;button onClick={() =&gt; setCount(count + 1)}&gt;
        Click me
      &amp;#x3C;/button&gt;
    &amp;#x3C;/div&gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Here’s a question for you: how does the effect read the latest &lt;code&gt;count&lt;/code&gt; state?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Maybe, there’s some kind of “data binding” or “watching” that makes &lt;code&gt;count&lt;/code&gt; update live inside the effect function? Maybe &lt;code&gt;count&lt;/code&gt; is a mutable variable that React sets inside our component so that our effect always sees the latest value?&lt;/p&gt;
&lt;p&gt;Nope.&lt;/p&gt;
&lt;p&gt;We already know that &lt;code&gt;count&lt;/code&gt; is constant within a particular component render. Event handlers “see” the &lt;code&gt;count&lt;/code&gt; state from the render that they “belong” to because &lt;code&gt;count&lt;/code&gt; is a variable in their scope. The same is true for effects!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;It’s not the &lt;code&gt;count&lt;/code&gt; variable that somehow changes inside an “unchanging” effect. It’s the &lt;em&gt;effect function itself&lt;/em&gt; that’s different on every render.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Each version “sees” the &lt;code&gt;count&lt;/code&gt; value from the render that it “belongs” to:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{5-8,17-20,29-32}&quot;&gt;// During first render
function Counter() {
  // ...
  useEffect(
    // Effect function from first render
    () =&gt; {
      document.title = `You clicked ${0} times`;
    }
  );
  // ...
}

// After a click, our function is called again
function Counter() {
  // ...
  useEffect(
    // Effect function from second render
    () =&gt; {
      document.title = `You clicked ${1} times`;
    }
  );
  // ...
}

// After another click, our function is called again
function Counter() {
  // ...
  useEffect(
    // Effect function from third render
    () =&gt; {
      document.title = `You clicked ${2} times`;
    }
  );
  // ..
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;React remembers the effect function you provided, and runs it after flushing changes to the DOM and letting the browser paint the screen.&lt;/p&gt;
&lt;p&gt;So even if we speak of a single conceptual &lt;em&gt;effect&lt;/em&gt; here (updating the document title), it is represented by a &lt;em&gt;different function&lt;/em&gt; on every render — and each effect function “sees” props and state from the particular render it “belongs” to.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Conceptually, you can imagine effects are a &lt;em&gt;part of the render result&lt;/em&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Strictly saying, they’re not (in order to &lt;a href=&quot;https://overreacted.io/why-do-hooks-rely-on-call-order/&quot;&gt;allow Hook composition&lt;/a&gt; without clumsy syntax or runtime overhead). But in the mental model we’re building up, effect functions &lt;em&gt;belong&lt;/em&gt; to a particular render in the same way that event handlers do.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;To make sure we have a solid understanding, let’s recap our first render:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;React:&lt;/strong&gt; Give me the UI when the state is &lt;code&gt;0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Your component:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Here’s the render result:
&lt;code&gt;&amp;#x3C;p&gt;You clicked 0 times&amp;#x3C;/p&gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Also remember to run this effect after you’re done: &lt;code&gt;() =&gt; { document.title = &apos;You clicked 0 times&apos; }&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;React:&lt;/strong&gt; Sure. Updating the UI. Hey browser, I’m adding some stuff to the DOM.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Browser:&lt;/strong&gt; Cool, I painted it to the screen.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;React:&lt;/strong&gt; OK, now I’m going to run the effect you gave me.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Running &lt;code&gt;() =&gt; { document.title = &apos;You clicked 0 times&apos; }&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Now let’s recap what happens after we click:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Your component:&lt;/strong&gt; Hey React, set my state to &lt;code&gt;1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;React:&lt;/strong&gt; Give me the UI for when the state is &lt;code&gt;1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Your component:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Here’s the render result:
&lt;code&gt;&amp;#x3C;p&gt;You clicked 1 times&amp;#x3C;/p&gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Also remember to run this effect after you’re done: &lt;code&gt;() =&gt; { document.title = &apos;You clicked 1 times&apos; }&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;React:&lt;/strong&gt; Sure. Updating the UI. Hey browser, I’ve changed the DOM.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Browser:&lt;/strong&gt; Cool, I painted your changes to the screen.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;React:&lt;/strong&gt; OK, now I’ll run the effect that belongs to the render I just did.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Running &lt;code&gt;() =&gt; { document.title = &apos;You clicked 1 times&apos; }&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Each Render Has Its Own... Everything&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;We know now that effects run after every render, are conceptually a part of the component output, and “see” the props and state from that particular render.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Let’s try a thought experiment. Consider this code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{4-8}&quot;&gt;function Counter() {
  const [count, setCount] = useState(0);

  useEffect(() =&gt; {
    setTimeout(() =&gt; {
      console.log(`You clicked ${count} times`);
    }, 3000);
  });

  return (
    &amp;#x3C;div&gt;
      &amp;#x3C;p&gt;You clicked {count} times&amp;#x3C;/p&gt;
      &amp;#x3C;button onClick={() =&gt; setCount(count + 1)}&gt;
        Click me
      &amp;#x3C;/button&gt;
    &amp;#x3C;/div&gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If I click several times with a small delay, what is the log going to look like?&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;spoilers ahead&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;You might think this is a gotcha and the end result is unintuitive. It’s not! We’re going to see a sequence of logs — each one belonging to a particular render and thus with its own &lt;code&gt;count&lt;/code&gt; value. You can &lt;a href=&quot;https://codesandbox.io/s/lyx20m1ol&quot;&gt;try it yourself&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./timeout_counter.gif&quot; alt=&quot;Screen recording of 1, 2, 3, 4, 5 logged in order&quot;&gt;&lt;/p&gt;
&lt;p&gt;You may think: “Of course that’s how it works! How else could it work?”&lt;/p&gt;
&lt;p&gt;Well, that’s not how &lt;code&gt;this.state&lt;/code&gt; works in classes. It’s easy to make the mistake of thinking that this &lt;a href=&quot;https://codesandbox.io/s/kkymzwjqz3&quot;&gt;class implementation&lt;/a&gt; is equivalent:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;  componentDidUpdate() {
    setTimeout(() =&gt; {
      console.log(`You clicked ${this.state.count} times`);
    }, 3000);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, &lt;code&gt;this.state.count&lt;/code&gt; always points at the &lt;em&gt;latest&lt;/em&gt; count rather than the one belonging to a particular render. So you’ll see &lt;code&gt;5&lt;/code&gt; logged each time instead:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./timeout_counter_class.gif&quot; alt=&quot;Screen recording of 5, 5, 5, 5, 5 logged in order&quot;&gt;&lt;/p&gt;
&lt;p&gt;I think it’s ironic that Hooks rely so much on JavaScript closures, and yet it’s the class implementation that suffers from &lt;a href=&quot;https://wsvincent.com/javascript-closure-settimeout-for-loop/&quot;&gt;the canonical wrong-value-in-a-timeout confusion&lt;/a&gt; that’s often associated with closures. This is because the actual source of the confusion in this example is the mutation (React mutates &lt;code&gt;this.state&lt;/code&gt; in classes to point to the latest state) and not closures themselves.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Closures are great when the values you close over never change. That makes them easy to think about because you’re essentially referring to constants.&lt;/strong&gt; And as we discussed, props and state never change within a particular render. By the way, we can fix the class version... by &lt;a href=&quot;https://codesandbox.io/s/w7vjo07055&quot;&gt;using a closure&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Swimming Against the Tide&lt;/h2&gt;
&lt;p&gt;At this point it’s important that we call it out explicitly: &lt;strong&gt;every&lt;/strong&gt; function inside the component render (including event handlers, effects, timeouts or API calls inside them) captures the props and state of the render call that defined it.&lt;/p&gt;
&lt;p&gt;So these two examples are equivalent:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{4}&quot;&gt;function Example(props) {
  useEffect(() =&gt; {
    setTimeout(() =&gt; {
      console.log(props.counter);
    }, 1000);
  });
  // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{2,5}&quot;&gt;function Example(props) {
  const counter = props.counter;
  useEffect(() =&gt; {
    setTimeout(() =&gt; {
      console.log(counter);
    }, 1000);
  });
  // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;It doesn’t matter whether you read from props or state “early” inside of your component.&lt;/strong&gt; They’re not going to change! Inside the scope of a single render, props and state stay the same. (Destructuring props makes this more obvious.)&lt;/p&gt;
&lt;p&gt;Of course, sometimes you &lt;em&gt;want&lt;/em&gt; to read the latest rather than captured value inside some callback defined in an effect. The easiest way to do it is by using refs, as described in the last section of &lt;a href=&quot;https://overreacted.io/how-are-function-components-different-from-classes/&quot;&gt;this article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Be aware that when you want to read the &lt;em&gt;future&lt;/em&gt; props or state from a function in a &lt;em&gt;past&lt;/em&gt; render, you’re swimming against the tide. It’s not &lt;em&gt;wrong&lt;/em&gt; (and in some cases necessary) but it might look less “clean” to break out of the paradigm. This is an intentional consequence because it helps highlight which code is fragile and depends on timing. In classes, it’s less obvious when this happens.&lt;/p&gt;
&lt;p&gt;Here’s a &lt;a href=&quot;https://codesandbox.io/s/rm7z22qnlp&quot;&gt;version of our counter example&lt;/a&gt; that replicates the class behavior:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{3,6-7,9-10}&quot;&gt;function Example() {
  const [count, setCount] = useState(0);
  const latestCount = useRef(count);

  useEffect(() =&gt; {
    // Set the mutable latest value
    latestCount.current = count;
    setTimeout(() =&gt; {
      // Read the mutable latest value
      console.log(`You clicked ${latestCount.current} times`);
    }, 3000);
  });
  // ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;./timeout_counter_refs.gif&quot; alt=&quot;Screen recording of 5, 5, 5, 5, 5 logged in order&quot;&gt;&lt;/p&gt;
&lt;p&gt;It might seem quirky to mutate something in React. However, this is exactly how React itself reassigns &lt;code&gt;this.state&lt;/code&gt; in classes. Unlike with captured props and state, you don’t have any guarantees that reading &lt;code&gt;latestCount.current&lt;/code&gt; would give you the same value in any particular callback. By definition, you can mutate it any time. This is why it’s not a default, and you have to opt into that.&lt;/p&gt;
&lt;h2&gt;So What About Cleanup?&lt;/h2&gt;
&lt;p&gt;As &lt;a href=&quot;https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup&quot;&gt;the docs explain&lt;/a&gt;, some effects might have a cleanup phase. Essentially, its purpose is to “undo” an effect for cases like subscriptions.&lt;/p&gt;
&lt;p&gt;Consider this code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;  useEffect(() =&gt; {
    ChatAPI.subscribeToFriendStatus(props.id, handleStatusChange);
    return () =&gt; {
      ChatAPI.unsubscribeFromFriendStatus(props.id, handleStatusChange);
    };
  });
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Say &lt;code&gt;props&lt;/code&gt; is &lt;code&gt;{id: 10}&lt;/code&gt; on the first render, and &lt;code&gt;{id: 20}&lt;/code&gt; on the second render. You &lt;em&gt;might&lt;/em&gt; think that something like this happens:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;React cleans up the effect for &lt;code&gt;{id: 10}&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;React renders UI for &lt;code&gt;{id: 20}&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;React runs the effect for &lt;code&gt;{id: 20}&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(This is not quite the case.)&lt;/p&gt;
&lt;p&gt;With this mental model, you might think the cleanup “sees” the old props because it runs before we re-render, and then the new effect “sees” the new props because it runs after the re-render. That’s the mental model lifted directly from the class lifecycles, and &lt;strong&gt;it’s not accurate here&lt;/strong&gt;. Let’s see why.&lt;/p&gt;
&lt;p&gt;React only runs the effects after &lt;a href=&quot;https://medium.com/@dan_abramov/this-benchmark-is-indeed-flawed-c3d6b5b6f97f&quot;&gt;letting the browser paint&lt;/a&gt;. This makes your app faster as most effects don’t need to block screen updates. Effect cleanup is also delayed. &lt;strong&gt;The previous effect is cleaned up &lt;em&gt;after&lt;/em&gt; the re-render with new props:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;React renders UI for &lt;code&gt;{id: 20}&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;The browser paints. We see the UI for &lt;code&gt;{id: 20}&lt;/code&gt; on the screen.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;React cleans up the effect for &lt;code&gt;{id: 10}&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;React runs the effect for &lt;code&gt;{id: 20}&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You might be wondering: but how can the cleanup of the previous effect still “see” the old &lt;code&gt;{id: 10}&lt;/code&gt; props if it runs &lt;em&gt;after&lt;/em&gt; the props change to &lt;code&gt;{id: 20}&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;We’ve been here before... 🤔&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./deja_vu.gif&quot; alt=&quot;Deja vu (cat scene from the Matrix movie)&quot;&gt;&lt;/p&gt;
&lt;p&gt;Quoting the previous section:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Every function inside the component render (including event handlers, effects, timeouts or API calls inside them) captures the props and state of the render call that defined it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now the answer is clear! The effect cleanup doesn’t read the “latest” props, whatever that means. It reads props that belong to the render it’s defined in:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{8-11}&quot;&gt;// First render, props are {id: 10}
function Example() {
  // ...
  useEffect(
    // Effect from first render
    () =&gt; {
      ChatAPI.subscribeToFriendStatus(10, handleStatusChange);
      // Cleanup for effect from first render
      return () =&gt; {
        ChatAPI.unsubscribeFromFriendStatus(10, handleStatusChange);
      };
    }
  );
  // ...
}

// Next render, props are {id: 20}
function Example() {
  // ...
  useEffect(
    // Effect from second render
    () =&gt; {
      ChatAPI.subscribeToFriendStatus(20, handleStatusChange);
      // Cleanup for effect from second render
      return () =&gt; {
        ChatAPI.unsubscribeFromFriendStatus(20, handleStatusChange);
      };
    }
  );
  // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Kingdoms will rise and turn into ashes, the Sun will shed its outer layers to be a white dwarf, and the last civilization will end. But nothing will make the props “seen” by the first render effect’s cleanup anything other than &lt;code&gt;{id: 10}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;That’s what allows React to deal with effects right after painting — and make your apps faster by default. The old props are still there if our code needs them.&lt;/p&gt;
&lt;h2&gt;Synchronization, Not Lifecycle&lt;/h2&gt;
&lt;p&gt;One of my favorite things about React is that it unifies describing the initial render result and the updates. This &lt;a href=&quot;https://overreacted.io/the-bug-o-notation/&quot;&gt;reduces the entropy&lt;/a&gt; of your program.&lt;/p&gt;
&lt;p&gt;Say my component looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;function Greeting({ name }) {
  return (
    &amp;#x3C;h1 className=&quot;Greeting&quot;&gt;
      Hello, {name}
    &amp;#x3C;/h1&gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It doesn’t matter if I render &lt;code&gt;&amp;#x3C;Greeting name=&quot;Dan&quot; /&gt;&lt;/code&gt; and later &lt;code&gt;&amp;#x3C;Greeting name=&quot;Yuzhi&quot; /&gt;&lt;/code&gt;, or if I just render &lt;code&gt;&amp;#x3C;Greeting name=&quot;Yuzhi&quot; /&gt;&lt;/code&gt;. In the end, we will see “Hello, Yuzhi” in both cases.&lt;/p&gt;
&lt;p&gt;People say: “It’s all about the journey, not the destination”. With React, it’s the opposite. &lt;strong&gt;It’s all about the destination, not the journey.&lt;/strong&gt; That’s the difference between &lt;code&gt;$.addClass&lt;/code&gt; and &lt;code&gt;$.removeClass&lt;/code&gt; calls in jQuery code (our “journey”) and specifying what the CSS class &lt;em&gt;should be&lt;/em&gt; in React code (our “destination”).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;React synchronizes the DOM according to our current props and state.&lt;/strong&gt; There is no distinction between a “mount” or an “update” when rendering.&lt;/p&gt;
&lt;p&gt;You should think of effects in a similar way. &lt;strong&gt;&lt;code&gt;useEffect&lt;/code&gt; lets you &lt;em&gt;synchronize&lt;/em&gt; things outside of the React tree according to our props and state.&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{2-4}&quot;&gt;function Greeting({ name }) {
  useEffect(() =&gt; {
    document.title = &apos;Hello, &apos; + name;
  });
  return (
    &amp;#x3C;h1 className=&quot;Greeting&quot;&gt;
      Hello, {name}
    &amp;#x3C;/h1&gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is subtly different from the familiar &lt;em&gt;mount/update/unmount&lt;/em&gt; mental model. It is important really to internalize this. &lt;strong&gt;If you’re trying to write an effect that behaves differently depending on whether the component renders for the first time or not, you’re swimming against the tide!&lt;/strong&gt; We’re failing at synchronizing if our result depends on the “journey” rather than the “destination”.&lt;/p&gt;
&lt;p&gt;It shouldn’t matter whether we rendered with props A, B, and C, or if we rendered with C immediately. While there may be some temporary differences (e.g. while we’re fetching data), eventually the end result should be the same.&lt;/p&gt;
&lt;p&gt;Still, of course running all effects on &lt;em&gt;every&lt;/em&gt; render might not be efficient. (And in some cases, it would lead to infinite loops.)&lt;/p&gt;
&lt;p&gt;So how can we fix this?&lt;/p&gt;
&lt;h2&gt;Teaching React to Diff Your Effects&lt;/h2&gt;
&lt;p&gt;We’ve already learned that lesson with the DOM itself. Instead of touching it on every re-render, React only updates the parts of the DOM that actually change.&lt;/p&gt;
&lt;p&gt;When you’re updating&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;#x3C;h1 className=&quot;Greeting&quot;&gt;
  Hello, Dan
&amp;#x3C;/h1&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;#x3C;h1 className=&quot;Greeting&quot;&gt;
  Hello, Yuzhi
&amp;#x3C;/h1&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;React sees two objects:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const oldProps = {className: &apos;Greeting&apos;, children: &apos;Hello, Dan&apos;};
const newProps = {className: &apos;Greeting&apos;, children: &apos;Hello, Yuzhi&apos;};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It goes over each of their props and determine that &lt;code&gt;children&lt;/code&gt; have changed and need a DOM update, but &lt;code&gt;className&lt;/code&gt; did not. So it can just do:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;domNode.innerText = &apos;Hello, Yuzhi&apos;;
// No need to touch domNode.className
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Could we do something like this with effects too? It would be nice to avoid re-running them when applying the effect is unnecessary.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For example, maybe our component re-renders because of a state change:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{11-13}&quot;&gt;function Greeting({ name }) {
  const [counter, setCounter] = useState(0);

  useEffect(() =&gt; {
    document.title = &apos;Hello, &apos; + name;
  });

  return (
    &amp;#x3C;h1 className=&quot;Greeting&quot;&gt;
      Hello, {name}
      &amp;#x3C;button onClick={() =&gt; setCounter(count + 1)}&gt;
        Increment
      &amp;#x3C;/button&gt;
    &amp;#x3C;/h1&gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But our effect doesn’t use the &lt;code&gt;counter&lt;/code&gt; state. &lt;strong&gt;Our effect synchronizes the &lt;code&gt;document.title&lt;/code&gt; with the &lt;code&gt;name&lt;/code&gt; prop, but the &lt;code&gt;name&lt;/code&gt; prop is the same.&lt;/strong&gt; Re-assigning &lt;code&gt;document.title&lt;/code&gt; on every counter change seems non-ideal.&lt;/p&gt;
&lt;p&gt;OK, so can React just... diff effects?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;let oldEffect = () =&gt; { document.title = &apos;Hello, Dan&apos;; };
let newEffect = () =&gt; { document.title = &apos;Hello, Dan&apos;; };
// Can React see these functions do the same thing?
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Not really. React can’t guess what the function does without calling it. (The source doesn’t really contain specific values, it just closes over the &lt;code&gt;name&lt;/code&gt; prop.)&lt;/p&gt;
&lt;p&gt;This is why if you want to avoid re-running effects unnecessarily, you can provide a dependency array (also known as “deps”) argument to &lt;code&gt;useEffect&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{3}&quot;&gt;  useEffect(() =&gt; {
    document.title = &apos;Hello, &apos; + name;
  }, [name]); // Our deps
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;It’s like if we told React: “Hey, I know you can’t see &lt;em&gt;inside&lt;/em&gt; this function, but I promise it only uses &lt;code&gt;name&lt;/code&gt; and nothing else from the render scope.”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If each of these values is the same between the current and the previous time this effect ran, there’s nothing to synchronize so React can skip the effect:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const oldEffect = () =&gt; { document.title = &apos;Hello, Dan&apos;; };
const oldDeps = [&apos;Dan&apos;];

const newEffect = () =&gt; { document.title = &apos;Hello, Dan&apos;; };
const newDeps = [&apos;Dan&apos;];

// React can&apos;t peek inside of functions, but it can compare deps.
// Since all deps are the same, it doesn’t need to run the new effect.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If even one of the values in the dependency array is different between renders, we know running the effect can’t be skipped. Synchronize all the things!&lt;/p&gt;
&lt;h2&gt;Don’t Lie to React About Dependencies&lt;/h2&gt;
&lt;p&gt;Lying to React about dependencies has bad consequences. Intuitively, this makes sense, but I’ve seen pretty much everyone who tries &lt;code&gt;useEffect&lt;/code&gt; with a mental model from classes try to cheat the rules. (And I did that too at first!)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;function SearchResults() {
  async function fetchData() {
    // ...
  }

  useEffect(() =&gt; {
    fetchData();
  }, []); // Is this okay? Not always -- and there&apos;s a better way to write it.

  // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;(The &lt;a href=&quot;https://reactjs.org/docs/hooks-faq.html#is-it-safe-to-omit-functions-from-the-list-of-dependencies&quot;&gt;Hooks FAQ&lt;/a&gt; explains what to do instead. We&apos;ll come back to this example &lt;a href=&quot;#moving-functions-inside-effects&quot;&gt;below&lt;/a&gt;.)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;“But I only want to run it on mount!”, you’ll say. For now, remember: if you specify deps, &lt;strong&gt;&lt;em&gt;all&lt;/em&gt; values from inside your component that are used by the effect &lt;em&gt;must&lt;/em&gt; be there&lt;/strong&gt;. Including props, state, functions — anything in your component.&lt;/p&gt;
&lt;p&gt;Sometimes when you do that, it causes a problem. For example, maybe you see an infinite refetching loop, or a socket is recreated too often. &lt;strong&gt;The solution to that problem is &lt;em&gt;not&lt;/em&gt; to remove a dependency.&lt;/strong&gt; We’ll look at the solutions soon.&lt;/p&gt;
&lt;p&gt;But before we jump to solutions, let’s understand the problem better.&lt;/p&gt;
&lt;h2&gt;What Happens When Dependencies Lie&lt;/h2&gt;
&lt;p&gt;If deps contain every value used by the effect, React knows when to re-run it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{3}&quot;&gt;  useEffect(() =&gt; {
    document.title = &apos;Hello, &apos; + name;
  }, [name]);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;./deps-compare-correct.gif&quot; alt=&quot;Diagram of effects replacing one another&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(Dependencies are different, so we re-run the effect.)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;But if we specified &lt;code&gt;[]&lt;/code&gt; for this effect, the new effect function wouldn’t run:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{3}&quot;&gt;  useEffect(() =&gt; {
    document.title = &apos;Hello, &apos; + name;
  }, []); // Wrong: name is missing in deps
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;./deps-compare-wrong.gif&quot; alt=&quot;Diagram of effects replacing one another&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(Dependencies are equal, so we skip the effect.)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In this case the problem might seem obvious. But the intuition can fool you in other cases where a class solution “jumps out” from your memory.&lt;/p&gt;
&lt;p&gt;For example, let’s say we’re writing a counter that increments every second. With a class, our intuition is: “Set up the interval once and destroy it once”. Here’s an &lt;a href=&quot;https://codesandbox.io/s/n5mjzjy9kl&quot;&gt;example&lt;/a&gt; of how we can do it. When we mentally translate this code to &lt;code&gt;useEffect&lt;/code&gt;, we instinctively add &lt;code&gt;[]&lt;/code&gt; to the deps. “I want it to run once”, right?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{9}&quot;&gt;function Counter() {
  const [count, setCount] = useState(0);

  useEffect(() =&gt; {
    const id = setInterval(() =&gt; {
      setCount(count + 1);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &amp;#x3C;h1&gt;{count}&amp;#x3C;/h1&gt;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, this example &lt;a href=&quot;https://codesandbox.io/s/91n5z8jo7r&quot;&gt;only &lt;em&gt;increments&lt;/em&gt; once&lt;/a&gt;. &lt;em&gt;Oops.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If your mental model is “dependencies let me specify when I want to re-trigger the effect”, this example might give you an existential crisis. You &lt;em&gt;want&lt;/em&gt; to trigger it once because it’s an interval — so why is it causing issues?&lt;/p&gt;
&lt;p&gt;However, this makes sense if you know that dependencies are our hint to React about &lt;em&gt;everything&lt;/em&gt; that the effect uses from the render scope. It uses &lt;code&gt;count&lt;/code&gt; but we lied that it doesn’t with &lt;code&gt;[]&lt;/code&gt;. It’s only a matter of time before this bites us!&lt;/p&gt;
&lt;p&gt;In the first render, &lt;code&gt;count&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;. Therefore, &lt;code&gt;setCount(count + 1)&lt;/code&gt; in the first render’s effect means &lt;code&gt;setCount(0 + 1)&lt;/code&gt;. &lt;strong&gt;Since we never re-run the effect because of &lt;code&gt;[]&lt;/code&gt; deps, it will keep calling &lt;code&gt;setCount(0 + 1)&lt;/code&gt; every second:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{8,12,21-22}&quot;&gt;// First render, state is 0
function Counter() {
  // ...
  useEffect(
    // Effect from first render
    () =&gt; {
      const id = setInterval(() =&gt; {
        setCount(0 + 1); // Always setCount(1)
      }, 1000);
      return () =&gt; clearInterval(id);
    },
    [] // Never re-runs
  );
  // ...
}

// Every next render, state is 1
function Counter() {
  // ...
  useEffect(
    // This effect is always ignored because
    // we lied to React about empty deps.
    () =&gt; {
      const id = setInterval(() =&gt; {
        setCount(1 + 1);
      }, 1000);
      return () =&gt; clearInterval(id);
    },
    []
  );
  // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We lied to React by saying our effect doesn’t depend on a value from inside our component, when in fact it does!&lt;/p&gt;
&lt;p&gt;Our effect uses &lt;code&gt;count&lt;/code&gt; — a value inside the component (but outside the effect):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{1,5}&quot;&gt;  const count = // ...

  useEffect(() =&gt; {
    const id = setInterval(() =&gt; {
      setCount(count + 1);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Therefore, specifying &lt;code&gt;[]&lt;/code&gt; as a dependency will create a bug. React will compare the dependencies, and skip updating this effect:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./interval-wrong.gif&quot; alt=&quot;Diagram of stale interval closure&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(Dependencies are equal, so we skip the effect.)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Issues like this are difficult to think about. Therefore, I encourage you to adopt it as a hard rule to always be honest about the effect dependencies, and specify them all. (We provide a &lt;a href=&quot;https://github.com/facebook/react/issues/14920&quot;&gt;lint rule&lt;/a&gt; if you want to enforce this on your team.)&lt;/p&gt;
&lt;h2&gt;Two Ways to Be Honest About Dependencies&lt;/h2&gt;
&lt;p&gt;There are two strategies to be honest about dependencies. You should generally start with the first one, and then apply the second one if needed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The first strategy is to fix the dependency array to include &lt;em&gt;all&lt;/em&gt; the values inside the component that are used inside the effect.&lt;/strong&gt; Let’s include &lt;code&gt;count&lt;/code&gt; as a dep:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{3,6}&quot;&gt;useEffect(() =&gt; {
  const id = setInterval(() =&gt; {
    setCount(count + 1);
  }, 1000);
  return () =&gt; clearInterval(id);
}, [count]);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This makes the dependency array correct. It may not be &lt;em&gt;ideal&lt;/em&gt; but that’s the first issue we needed to fix. Now a change to &lt;code&gt;count&lt;/code&gt; will re-run the effect, with each next interval referencing &lt;code&gt;count&lt;/code&gt; from its render in &lt;code&gt;setCount(count + 1)&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{8,12,24,28}&quot;&gt;// First render, state is 0
function Counter() {
  // ...
  useEffect(
    // Effect from first render
    () =&gt; {
      const id = setInterval(() =&gt; {
        setCount(0 + 1); // setCount(count + 1)
      }, 1000);
      return () =&gt; clearInterval(id);
    },
    [0] // [count]
  );
  // ...
}

// Second render, state is 1
function Counter() {
  // ...
  useEffect(
    // Effect from second render
    () =&gt; {
      const id = setInterval(() =&gt; {
        setCount(1 + 1); // setCount(count + 1)
      }, 1000);
      return () =&gt; clearInterval(id);
    },
    [1] // [count]
  );
  // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That would &lt;a href=&quot;https://codesandbox.io/s/0x0mnlyq8l&quot;&gt;fix the problem&lt;/a&gt; but our interval would be cleared and set again whenever the &lt;code&gt;count&lt;/code&gt; changes. That may be undesirable:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./interval-rightish.gif&quot; alt=&quot;Diagram of interval that re-subscribes&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(Dependencies are different, so we re-run the effect.)&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;The second strategy is to change our effect code so that it wouldn’t &lt;em&gt;need&lt;/em&gt; a value that changes more often than we want.&lt;/strong&gt; We don’t want to lie about the dependencies — we just want to change our effect to have &lt;em&gt;fewer&lt;/em&gt; of them.&lt;/p&gt;
&lt;p&gt;Let’s look at a few common techniques for removing dependencies.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Making Effects Self-Sufficient&lt;/h2&gt;
&lt;p&gt;We want to get rid of the &lt;code&gt;count&lt;/code&gt; dependency in our effect.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{3,6}&quot;&gt;  useEffect(() =&gt; {
    const id = setInterval(() =&gt; {
      setCount(count + 1);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, [count]);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To do this, we need to ask ourselves: &lt;strong&gt;what are we using &lt;code&gt;count&lt;/code&gt; for?&lt;/strong&gt; It seems like we only use it for the &lt;code&gt;setCount&lt;/code&gt; call. In that case, we don’t actually need &lt;code&gt;count&lt;/code&gt; in the scope at all. When we want to update state based on the previous state, we can use the &lt;a href=&quot;https://reactjs.org/docs/hooks-reference.html#functional-updates&quot;&gt;functional updater form&lt;/a&gt; of &lt;code&gt;setState&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{3}&quot;&gt;  useEffect(() =&gt; {
    const id = setInterval(() =&gt; {
      setCount(c =&gt; c + 1);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I like to think of these cases as “false dependencies”. Yes, &lt;code&gt;count&lt;/code&gt; was a necessary dependency because we wrote &lt;code&gt;setCount(count + 1)&lt;/code&gt; inside the effect. However, we only truly needed &lt;code&gt;count&lt;/code&gt; to transform it into &lt;code&gt;count + 1&lt;/code&gt; and “send it back” to React. But React &lt;em&gt;already knows&lt;/em&gt; the current &lt;code&gt;count&lt;/code&gt;. &lt;strong&gt;All we needed to tell React is to increment the state — whatever it is right now.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;That’s exactly what &lt;code&gt;setCount(c =&gt; c + 1)&lt;/code&gt; does. You can think of it as “sending an instruction” to React about how the state should change. This “updater form” also helps in other cases, like when you &lt;a href=&quot;https://chuthechuong.github.io/thepapersnotread/thepapersnotread/react-as-a-ui-runtime/#batching&quot;&gt;batch multiple updates&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note that we actually &lt;em&gt;did the work&lt;/em&gt; to remove the dependency. We didn’t cheat. Our effect doesn’t read the &lt;code&gt;counter&lt;/code&gt; value from the render scope anymore:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./interval-right.gif&quot; alt=&quot;Diagram of interval that works&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(Dependencies are equal, so we skip the effect.)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You can try it &lt;a href=&quot;https://codesandbox.io/s/q3181xz1pj&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Even though this effect only runs once, the interval callback that belongs to the first render is perfectly capable of sending the &lt;code&gt;c =&gt; c + 1&lt;/code&gt; update instruction every time the interval fires. It doesn’t need to know the current &lt;code&gt;counter&lt;/code&gt; state anymore. React already knows it.&lt;/p&gt;
&lt;h2&gt;Functional Updates and Google Docs&lt;/h2&gt;
&lt;p&gt;Remember how we talked about synchronization being the mental model for effects? An interesting aspect of synchronization is that you often want to keep the “messages” between the systems untangled from their state. For example, editing a document in Google Docs doesn’t actually send the &lt;em&gt;whole&lt;/em&gt; page to the server. That would be very inefficient. Instead, it sends a representation of what the user tried to do.&lt;/p&gt;
&lt;p&gt;While our use case is different, a similar philosophy applies to effects. &lt;strong&gt;It helps to send only the minimal necessary information from inside the effects into a component.&lt;/strong&gt; The updater form like &lt;code&gt;setCount(c =&gt; c + 1)&lt;/code&gt; conveys strictly less information than &lt;code&gt;setCount(count + 1)&lt;/code&gt; because it isn’t “tainted” by the current count. It only expresses the action (“incrementing”). Thinking in React involves &lt;a href=&quot;https://reactjs.org/docs/thinking-in-react.html#step-3-identify-the-minimal-but-complete-representation-of-ui-state&quot;&gt;finding the minimal state&lt;/a&gt;. This is the same principle, but for updates.&lt;/p&gt;
&lt;p&gt;Encoding the &lt;em&gt;intent&lt;/em&gt; (rather than the result) is similar to how Google Docs &lt;a href=&quot;https://medium.com/@srijancse/how-real-time-collaborative-editing-work-operational-transformation-ac4902d75682&quot;&gt;solves&lt;/a&gt; collaborative editing. While this is stretching the analogy, functional updates serve a similar role in React. They ensure updates from multiple sources (event handlers, effect subscriptions, etc) can be correctly applied in a batch and in a predictable way.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;However, even &lt;code&gt;setCount(c =&gt; c + 1)&lt;/code&gt; isn’t that great.&lt;/strong&gt; It looks a bit weird and it’s very limited in what it can do. For example, if we had two state variables whose values depend on each other, or if we needed to calculate the next state based on a prop, it wouldn’t help us. Luckily, &lt;code&gt;setCount(c =&gt; c + 1)&lt;/code&gt; has a more powerful sister pattern. Its name is &lt;code&gt;useReducer&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Decoupling Updates from Actions&lt;/h2&gt;
&lt;p&gt;Let’s modify the previous example to have two state variables: &lt;code&gt;count&lt;/code&gt; and &lt;code&gt;step&lt;/code&gt;. Our interval will increment the count by the value of the &lt;code&gt;step&lt;/code&gt; input:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{7,10}&quot;&gt;function Counter() {
  const [count, setCount] = useState(0);
  const [step, setStep] = useState(1);

  useEffect(() =&gt; {
    const id = setInterval(() =&gt; {
      setCount(c =&gt; c + step);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, [step]);

  return (
    &amp;#x3C;&gt;
      &amp;#x3C;h1&gt;{count}&amp;#x3C;/h1&gt;
      &amp;#x3C;input value={step} onChange={e =&gt; setStep(Number(e.target.value))} /&gt;
    &amp;#x3C;/&gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(Here’s a &lt;a href=&quot;https://codesandbox.io/s/zxn70rnkx&quot;&gt;demo&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Note that &lt;strong&gt;we’re not cheating&lt;/strong&gt;. Since I started using &lt;code&gt;step&lt;/code&gt; inside the effect, I added it to the dependencies. And that’s why the code runs correctly.&lt;/p&gt;
&lt;p&gt;The current behavior in this example is that changing the &lt;code&gt;step&lt;/code&gt; restarts the interval — because it’s one of the dependencies. And in many cases, that is exactly what you want! There’s nothing wrong with tearing down an effect and setting it up anew, and we shouldn’t avoid that unless we have a good reason.&lt;/p&gt;
&lt;p&gt;However, let’s say we want the interval clock to not reset on changes to the &lt;code&gt;step&lt;/code&gt;. How do we remove the &lt;code&gt;step&lt;/code&gt; dependency from our effect?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;When setting a state variable depends on the current value of another state variable, you might want to try replacing them both with &lt;code&gt;useReducer&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When you find yourself writing &lt;code&gt;setSomething(something =&gt; ...)&lt;/code&gt;, it’s a good time to consider using a reducer instead. A reducer lets you &lt;strong&gt;decouple expressing the “actions” that happened in your component from how the state updates in response to them&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Let’s trade the &lt;code&gt;step&lt;/code&gt; dependency for a &lt;code&gt;dispatch&lt;/code&gt; dependency in our effect:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{1,6,9}&quot;&gt;const [state, dispatch] = useReducer(reducer, initialState);
const { count, step } = state;

useEffect(() =&gt; {
  const id = setInterval(() =&gt; {
    dispatch({ type: &apos;tick&apos; }); // Instead of setCount(c =&gt; c + step);
  }, 1000);
  return () =&gt; clearInterval(id);
}, [dispatch]);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(See the &lt;a href=&quot;https://codesandbox.io/s/xzr480k0np&quot;&gt;demo&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;You might ask me: “How is this any better?” The answer is that &lt;strong&gt;React guarantees the &lt;code&gt;dispatch&lt;/code&gt; function to be constant throughout the component lifetime. So the example above doesn’t ever need to resubscribe the interval.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We solved our problem!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(You may omit &lt;code&gt;dispatch&lt;/code&gt;, &lt;code&gt;setState&lt;/code&gt;, and &lt;code&gt;useRef&lt;/code&gt; container values from the deps because React guarantees them to be static. But it also doesn’t hurt to specify them.)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Instead of reading the state &lt;em&gt;inside&lt;/em&gt; an effect, it dispatches an &lt;em&gt;action&lt;/em&gt; that encodes the information about &lt;em&gt;what happened&lt;/em&gt;. This allows our effect to stay decoupled from the &lt;code&gt;step&lt;/code&gt; state. Our effect doesn’t care &lt;em&gt;how&lt;/em&gt; we update the state, it just tells us about &lt;em&gt;what happened&lt;/em&gt;. And the reducer centralizes the update logic:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{8,9}&quot;&gt;const initialState = {
  count: 0,
  step: 1,
};

function reducer(state, action) {
  const { count, step } = state;
  if (action.type === &apos;tick&apos;) {
    return { count: count + step, step };
  } else if (action.type === &apos;step&apos;) {
    return { count, step: action.step };
  } else {
    throw new Error();
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(Here’s a &lt;a href=&quot;https://codesandbox.io/s/xzr480k0np&quot;&gt;demo&lt;/a&gt; if you missed it earlier).&lt;/p&gt;
&lt;h2&gt;Why useReducer Is the Cheat Mode of Hooks&lt;/h2&gt;
&lt;p&gt;We’ve seen how to remove dependencies when an effect needs to set state based on previous state, or on another state variable. &lt;strong&gt;But what if we need &lt;em&gt;props&lt;/em&gt; to calculate the next state?&lt;/strong&gt; For example, maybe our API is &lt;code&gt;&amp;#x3C;Counter step={1} /&gt;&lt;/code&gt;. Surely, in this case we can’t avoid specifying &lt;code&gt;props.step&lt;/code&gt; as a dependency?&lt;/p&gt;
&lt;p&gt;In fact, we can! We can put &lt;em&gt;the reducer itself&lt;/em&gt; inside our component to read props:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{1,6}&quot;&gt;function Counter({ step }) {
  const [count, dispatch] = useReducer(reducer, 0);

  function reducer(state, action) {
    if (action.type === &apos;tick&apos;) {
      return state + step;
    } else {
      throw new Error();
    }
  }

  useEffect(() =&gt; {
    const id = setInterval(() =&gt; {
      dispatch({ type: &apos;tick&apos; });
    }, 1000);
    return () =&gt; clearInterval(id);
  }, [dispatch]);

  return &amp;#x3C;h1&gt;{count}&amp;#x3C;/h1&gt;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This pattern disables a few optimizations so try not to use it everywhere, but you can totally access props from a reducer if you need to. (Here’s a &lt;a href=&quot;https://codesandbox.io/s/7ypm405o8q&quot;&gt;demo&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Even in that case, &lt;code&gt;dispatch&lt;/code&gt; identity is still guaranteed to be stable between re-renders.&lt;/strong&gt; So you may omit it from the effect deps if you want. It’s not going to cause the effect to re-run.&lt;/p&gt;
&lt;p&gt;You may be wondering: how can this possibly work? How can the reducer “know” props when called from inside an effect that belongs to another render? The answer is that when you &lt;code&gt;dispatch&lt;/code&gt;, React just remembers the action — but it will &lt;em&gt;call&lt;/em&gt; your reducer during the next render. At that point the fresh props will be in scope, and you won’t be inside an effect.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This is why I like to think of &lt;code&gt;useReducer&lt;/code&gt; as the “cheat mode” of Hooks. It lets me decouple the update logic from describing what happened. This, in turn, helps me remove unnecessary dependencies from my effects and avoid re-running them more often than necessary.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Moving Functions Inside Effects&lt;/h2&gt;
&lt;p&gt;A common mistake is to think functions shouldn’t be dependencies. For example, this seems like it could work:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{13}&quot;&gt;function SearchResults() {
  const [data, setData] = useState({ hits: [] });

  async function fetchData() {
    const result = await axios(
      &apos;https://hn.algolia.com/api/v1/search?query=react&apos;,
    );
    setData(result.data);
  }

  useEffect(() =&gt; {
    fetchData();
  }, []); // Is this okay?

  // ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;(&lt;a href=&quot;https://codesandbox.io/s/8j4ykjyv0&quot;&gt;This example&lt;/a&gt; is adapted from a great article by Robin Wieruch — &lt;a href=&quot;https://www.robinwieruch.de/react-hooks-fetch-data/&quot;&gt;check it out&lt;/a&gt;!)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;And to be clear, this code &lt;em&gt;does&lt;/em&gt; work. &lt;strong&gt;But the problem with simply omitting local functions is that it gets pretty hard to tell whether we’re handling all cases as the component grows!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Imagine our code was split like this and each function was five times larger:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;function SearchResults() {
  // Imagine this function is long
  function getFetchUrl() {
    return &apos;https://hn.algolia.com/api/v1/search?query=react&apos;;
  }

  // Imagine this function is also long
  async function fetchData() {
    const result = await axios(getFetchUrl());
    setData(result.data);
  }

  useEffect(() =&gt; {
    fetchData();
  }, []);

  // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let’s say we later use some state or prop in one of these functions:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{6}&quot;&gt;function SearchResults() {
  const [query, setQuery] = useState(&apos;react&apos;);

  // Imagine this function is also long
  function getFetchUrl() {
    return &apos;https://hn.algolia.com/api/v1/search?query=&apos; + query;
  }

  // Imagine this function is also long
  async function fetchData() {
    const result = await axios(getFetchUrl());
    setData(result.data);
  }

  useEffect(() =&gt; {
    fetchData();
  }, []);

  // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we forget to update the deps of any effects that call these functions (possibly, through other functions!), our effects will fail to synchronize changes from our props and state. This doesn’t sound great.&lt;/p&gt;
&lt;p&gt;Luckily, there is an easy solution to this problem. &lt;strong&gt;If you only use some functions &lt;em&gt;inside&lt;/em&gt; an effect, move them directly &lt;em&gt;into&lt;/em&gt; that effect:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{4-12}&quot;&gt;function SearchResults() {
  // ...
  useEffect(() =&gt; {
    // We moved these functions inside!
    function getFetchUrl() {
      return &apos;https://hn.algolia.com/api/v1/search?query=react&apos;;
    }

    async function fetchData() {
      const result = await axios(getFetchUrl());
      setData(result.data);
    }

    fetchData();
  }, []); // ✅ Deps are OK
  // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(&lt;a href=&quot;https://codesandbox.io/s/04kp3jwwql&quot;&gt;Here’s a demo&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;So what is the benefit? We no longer have to think about the “transitive dependencies”. Our dependencies array isn’t lying anymore: &lt;strong&gt;we truly &lt;em&gt;aren’t&lt;/em&gt; using anything from the outer scope of the component in our effect&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If we later edit &lt;code&gt;getFetchUrl&lt;/code&gt; to use the &lt;code&gt;query&lt;/code&gt; state, we’re much more likely to notice that we’re editing it &lt;em&gt;inside&lt;/em&gt; an effect — and therefore, we need to add &lt;code&gt;query&lt;/code&gt; to the effect dependencies:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{6,15}&quot;&gt;function SearchResults() {
  const [query, setQuery] = useState(&apos;react&apos;);

  useEffect(() =&gt; {
    function getFetchUrl() {
      return &apos;https://hn.algolia.com/api/v1/search?query=&apos; + query;
    }

    async function fetchData() {
      const result = await axios(getFetchUrl());
      setData(result.data);
    }

    fetchData();
  }, [query]); // ✅ Deps are OK

  // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(Here’s a &lt;a href=&quot;https://codesandbox.io/s/pwm32zx7z7&quot;&gt;demo&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;By adding this dependency, we’re not just “appeasing React”. It &lt;em&gt;makes sense&lt;/em&gt; to refetch the data when the query changes. &lt;strong&gt;The design of &lt;code&gt;useEffect&lt;/code&gt; forces you to notice the change in our data flow and choose how our effects should synchronize it — instead of ignoring it until our product users hit a bug.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Thanks to the &lt;code&gt;exhaustive-deps&lt;/code&gt; lint rule from the &lt;code&gt;eslint-plugin-react-hooks&lt;/code&gt; plugin, you can &lt;a href=&quot;https://github.com/facebook/react/issues/14920&quot;&gt;analyze the effects as you type in your editor&lt;/a&gt; and receive suggestions about which dependencies are missing. In other words, a machine can tell you which data flow changes aren’t handled correctly by a component.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./exhaustive-deps.gif&quot; alt=&quot;Lint rule gif&quot;&gt;&lt;/p&gt;
&lt;p&gt;Pretty sweet.&lt;/p&gt;
&lt;h2&gt;But I Can’t Put This Function Inside an Effect&lt;/h2&gt;
&lt;p&gt;Sometimes you might not want to move a function &lt;em&gt;inside&lt;/em&gt; an effect. For example, several effects in the same component may call the same function, and you don’t want to copy and paste its logic. Or maybe it’s a prop.&lt;/p&gt;
&lt;p&gt;Should you skip a function like this in the effect dependencies? I think not. Again, &lt;strong&gt;effects shouldn’t lie about their dependencies.&lt;/strong&gt; There are usually better solutions. A common misconception is that “a function would never change”. But as we learned throughout this article, this couldn’t be further from truth. Indeed, a function defined inside a component changes on every render!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;That by itself presents a problem.&lt;/strong&gt; Say two effects call &lt;code&gt;getFetchUrl&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;function SearchResults() {
  function getFetchUrl(query) {
    return &apos;https://hn.algolia.com/api/v1/search?query=&apos; + query;
  }

  useEffect(() =&gt; {
    const url = getFetchUrl(&apos;react&apos;);
    // ... Fetch data and do something ...
  }, []); // 🔴 Missing dep: getFetchUrl

  useEffect(() =&gt; {
    const url = getFetchUrl(&apos;redux&apos;);
    // ... Fetch data and do something ...
  }, []); // 🔴 Missing dep: getFetchUrl

  // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In that case you might not want to move &lt;code&gt;getFetchUrl&lt;/code&gt; inside either of the effects since you wouldn’t be able to share the logic.&lt;/p&gt;
&lt;p&gt;On the other hand, if you’re “honest” about the effect dependencies, you may run into a problem. Since both our effects depend on &lt;code&gt;getFetchUrl&lt;/code&gt; &lt;strong&gt;(which is different on every render)&lt;/strong&gt;, our dependency arrays are useless:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{2-5}&quot;&gt;function SearchResults() {
  // 🔴 Re-triggers all effects on every render
  function getFetchUrl(query) {
    return &apos;https://hn.algolia.com/api/v1/search?query=&apos; + query;
  }

  useEffect(() =&gt; {
    const url = getFetchUrl(&apos;react&apos;);
    // ... Fetch data and do something ...
  }, [getFetchUrl]); // 🚧 Deps are correct but they change too often

  useEffect(() =&gt; {
    const url = getFetchUrl(&apos;redux&apos;);
    // ... Fetch data and do something ...
  }, [getFetchUrl]); // 🚧 Deps are correct but they change too often

  // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A tempting solution to this is to just skip the &lt;code&gt;getFetchUrl&lt;/code&gt; function in the deps list. However, I don’t think it’s a good solution. This makes it difficult to notice when we &lt;em&gt;are&lt;/em&gt; adding a change to the data flow that &lt;em&gt;needs&lt;/em&gt; to be handled by an effect. This leads to bugs like the “never updating interval” we saw earlier.&lt;/p&gt;
&lt;p&gt;Instead, there are two other solutions that are simpler.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;First of all, if a function doesn’t use anything from the component scope, you can hoist it outside the component and then freely use it inside your effects:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{1-4}&quot;&gt;// ✅ Not affected by the data flow
function getFetchUrl(query) {
  return &apos;https://hn.algolia.com/api/v1/search?query=&apos; + query;
}

function SearchResults() {
  useEffect(() =&gt; {
    const url = getFetchUrl(&apos;react&apos;);
    // ... Fetch data and do something ...
  }, []); // ✅ Deps are OK

  useEffect(() =&gt; {
    const url = getFetchUrl(&apos;redux&apos;);
    // ... Fetch data and do something ...
  }, []); // ✅ Deps are OK

  // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There’s no need to specify it in deps because it’s not in the render scope and can’t be affected by the data flow. It can’t accidentally depend on props or state.&lt;/p&gt;
&lt;p&gt;Alternatively, you can wrap it into the &lt;a href=&quot;https://reactjs.org/docs/hooks-reference.html#usecallback&quot;&gt;&lt;code&gt;useCallback&lt;/code&gt; Hook&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{2-5}&quot;&gt;function SearchResults() {
  // ✅ Preserves identity when its own deps are the same
  const getFetchUrl = useCallback((query) =&gt; {
    return &apos;https://hn.algolia.com/api/v1/search?query=&apos; + query;
  }, []);  // ✅ Callback deps are OK

  useEffect(() =&gt; {
    const url = getFetchUrl(&apos;react&apos;);
    // ... Fetch data and do something ...
  }, [getFetchUrl]); // ✅ Effect deps are OK

  useEffect(() =&gt; {
    const url = getFetchUrl(&apos;redux&apos;);
    // ... Fetch data and do something ...
  }, [getFetchUrl]); // ✅ Effect deps are OK

  // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;useCallback&lt;/code&gt; is essentially like adding another layer of dependency checks. It’s solving the problem on the other end — &lt;strong&gt;rather than avoid a function dependency, we make the function itself only change when necessary&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Let&apos;s see why this approach is useful. Previously, our example showed two search results (for &lt;code&gt;&apos;react&apos;&lt;/code&gt; and &lt;code&gt;&apos;redux&apos;&lt;/code&gt; search queries). But let&apos;s say we want to add an input so that you can search for an arbitrary &lt;code&gt;query&lt;/code&gt;. So instead of taking &lt;code&gt;query&lt;/code&gt; as an argument, &lt;code&gt;getFetchUrl&lt;/code&gt; will now read it from local state.&lt;/p&gt;
&lt;p&gt;We&apos;ll immediately see that it&apos;s missing a &lt;code&gt;query&lt;/code&gt; dependency:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{5}&quot;&gt;function SearchResults() {
  const [query, setQuery] = useState(&apos;react&apos;);
  const getFetchUrl = useCallback(() =&gt; { // No query argument
    return &apos;https://hn.algolia.com/api/v1/search?query=&apos; + query;
  }, []); // 🔴 Missing dep: query
  // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If I fix my &lt;code&gt;useCallback&lt;/code&gt; deps to include &lt;code&gt;query&lt;/code&gt;, any effect with &lt;code&gt;getFetchUrl&lt;/code&gt; in deps will re-run whenever the &lt;code&gt;query&lt;/code&gt; changes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{4-7}&quot;&gt;function SearchResults() {
  const [query, setQuery] = useState(&apos;react&apos;);

  // ✅ Preserves identity until query changes
  const getFetchUrl = useCallback(() =&gt; {
    return &apos;https://hn.algolia.com/api/v1/search?query=&apos; + query;
  }, [query]);  // ✅ Callback deps are OK

  useEffect(() =&gt; {
    const url = getFetchUrl();
    // ... Fetch data and do something ...
  }, [getFetchUrl]); // ✅ Effect deps are OK

  // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thanks to &lt;code&gt;useCallback&lt;/code&gt;, if &lt;code&gt;query&lt;/code&gt; is the same, &lt;code&gt;getFetchUrl&lt;/code&gt; also stays the same, and our effect doesn&apos;t re-run. But if &lt;code&gt;query&lt;/code&gt; changes, &lt;code&gt;getFetchUrl&lt;/code&gt; will also change, and we will re-fetch the data. It&apos;s a lot like when you change some cell in an Excel spreadsheet, and the other cells using it recalculate automatically.&lt;/p&gt;
&lt;p&gt;This is just a consequence of embracing the data flow and the synchronization mindset. &lt;strong&gt;The same solution works for function props passed from parents:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{4-8}&quot;&gt;function Parent() {
  const [query, setQuery] = useState(&apos;react&apos;);

  // ✅ Preserves identity until query changes
  const fetchData = useCallback(() =&gt; {
    const url = &apos;https://hn.algolia.com/api/v1/search?query=&apos; + query;
    // ... Fetch data and return it ...
  }, [query]);  // ✅ Callback deps are OK

  return &amp;#x3C;Child fetchData={fetchData} /&gt;
}

function Child({ fetchData }) {
  let [data, setData] = useState(null);

  useEffect(() =&gt; {
    fetchData().then(setData);
  }, [fetchData]); // ✅ Effect deps are OK

  // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since &lt;code&gt;fetchData&lt;/code&gt; only changes inside &lt;code&gt;Parent&lt;/code&gt; when its &lt;code&gt;query&lt;/code&gt; state changes, our &lt;code&gt;Child&lt;/code&gt; won’t refetch the data until it’s actually necessary for the app.&lt;/p&gt;
&lt;h2&gt;Are Functions Part of the Data Flow?&lt;/h2&gt;
&lt;p&gt;Interestingly, this pattern is broken with classes in a way that really shows the difference between the effect and lifecycle paradigms. Consider this translation:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{5-8,18-20}&quot;&gt;class Parent extends Component {
  state = {
    query: &apos;react&apos;
  };
  fetchData = () =&gt; {
    const url = &apos;https://hn.algolia.com/api/v1/search?query=&apos; + this.state.query;
    // ... Fetch data and do something ...
  };
  render() {
    return &amp;#x3C;Child fetchData={this.fetchData} /&gt;;
  }
}

class Child extends Component {
  state = {
    data: null
  };
  componentDidMount() {
    this.props.fetchData();
  }
  render() {
    // ...
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You might be thinking: “Come on Dan, we all know that &lt;code&gt;useEffect&lt;/code&gt; is like &lt;code&gt;componentDidMount&lt;/code&gt; and &lt;code&gt;componentDidUpdate&lt;/code&gt; combined, you can’t keep beating that drum!” &lt;strong&gt;Yet this doesn’t work even with &lt;code&gt;componentDidUpdate&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{8-13}&quot;&gt;class Child extends Component {
  state = {
    data: null
  };
  componentDidMount() {
    this.props.fetchData();
  }
  componentDidUpdate(prevProps) {
    // 🔴 This condition will never be true
    if (this.props.fetchData !== prevProps.fetchData) {
      this.props.fetchData();
    }
  }
  render() {
    // ...
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of course, &lt;code&gt;fetchData&lt;/code&gt; is a class method! (Or, rather, a class property — but that doesn’t change anything.) It’s not going to be different because of a state change. So &lt;code&gt;this.props.fetchData&lt;/code&gt; will stay equal to &lt;code&gt;prevProps.fetchData&lt;/code&gt; and we’ll never refetch. Let’s just remove this condition then?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;  componentDidUpdate(prevProps) {
    this.props.fetchData();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Oh wait, this fetches on &lt;em&gt;every&lt;/em&gt; re-render. (Adding an animation above in the tree is a fun way to discover it.) Maybe let’s bind it to a particular query?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;  render() {
    return &amp;#x3C;Child fetchData={this.fetchData.bind(this, this.state.query)} /&gt;;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But then &lt;code&gt;this.props.fetchData !== prevProps.fetchData&lt;/code&gt; is &lt;em&gt;always&lt;/em&gt; &lt;code&gt;true&lt;/code&gt;, even if the &lt;code&gt;query&lt;/code&gt; didn’t change! So we’ll &lt;em&gt;always&lt;/em&gt; refetch.&lt;/p&gt;
&lt;p&gt;The only real solution to this conundrum with classes is to bite the bullet and pass the &lt;code&gt;query&lt;/code&gt; itself into the &lt;code&gt;Child&lt;/code&gt; component. The &lt;code&gt;Child&lt;/code&gt; doesn’t actually end up &lt;em&gt;using&lt;/em&gt; the &lt;code&gt;query&lt;/code&gt;, but it can trigger a refetch when it changes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{10,22-24}&quot;&gt;class Parent extends Component {
  state = {
    query: &apos;react&apos;
  };
  fetchData = () =&gt; {
    const url = &apos;https://hn.algolia.com/api/v1/search?query=&apos; + this.state.query;
    // ... Fetch data and do something ...
  };
  render() {
    return &amp;#x3C;Child fetchData={this.fetchData} query={this.state.query} /&gt;;
  }
}

class Child extends Component {
  state = {
    data: null
  };
  componentDidMount() {
    this.props.fetchData();
  }
  componentDidUpdate(prevProps) {
    if (this.props.query !== prevProps.query) {
      this.props.fetchData();
    }
  }
  render() {
    // ...
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Over the years of working with classes with React, I’ve gotten so used to passing unnecessary props down and breaking encapsulation of parent components that I only realized a week ago why we had to do it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;With classes, function props by themselves aren’t truly a part of the data flow.&lt;/strong&gt; Methods close over the mutable &lt;code&gt;this&lt;/code&gt; variable so we can’t rely on their identity to mean anything. Therefore, even when we only want a function, we have to pass a bunch of other data around in order to be able to “diff” it. We can’t know whether &lt;code&gt;this.props.fetchData&lt;/code&gt; passed from the parent depends on some state or not, and whether that state has just changed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;With &lt;code&gt;useCallback&lt;/code&gt;, functions can fully participate in the data flow.&lt;/strong&gt; We can say that if the function inputs changed, the function itself has changed, but if not, it stayed the same. Thanks to the granularity provided by &lt;code&gt;useCallback&lt;/code&gt;, changes to props like &lt;code&gt;props.fetchData&lt;/code&gt; can propagate down automatically.&lt;/p&gt;
&lt;p&gt;Similarly, &lt;a href=&quot;https://reactjs.org/docs/hooks-reference.html#usememo&quot;&gt;&lt;code&gt;useMemo&lt;/code&gt;&lt;/a&gt; lets us do the same for complex objects:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;function ColorPicker() {
  // Doesn&apos;t break Child&apos;s shallow equality prop check
  // unless the color actually changes.
  const [color, setColor] = useState(&apos;pink&apos;);
  const style = useMemo(() =&gt; ({ color }), [color]);
  return &amp;#x3C;Child style={style} /&gt;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;I want to emphasize that putting &lt;code&gt;useCallback&lt;/code&gt; everywhere is pretty clunky.&lt;/strong&gt; It’s a nice escape hatch and it’s useful when a function is both passed down &lt;em&gt;and&lt;/em&gt; called from inside an effect in some children. Or if you’re trying to prevent breaking memoization of a child component. But Hooks lend themselves better to &lt;a href=&quot;https://reactjs.org/docs/hooks-faq.html#how-to-avoid-passing-callbacks-down&quot;&gt;avoiding passing callbacks down&lt;/a&gt; altogether.&lt;/p&gt;
&lt;p&gt;In the above examples, I’d much prefer if &lt;code&gt;fetchData&lt;/code&gt; was either inside my effect (which itself could be extracted to a custom Hook) or a top-level import. I want to keep the effects simple, and callbacks in them don’t help that. (“What if some &lt;code&gt;props.onComplete&lt;/code&gt; callback changes while the request was in flight?”) You can &lt;a href=&quot;#swimming-against-the-tide&quot;&gt;simulate the class behavior&lt;/a&gt; but that doesn’t solve race conditions.&lt;/p&gt;
&lt;h2&gt;Speaking of Race Conditions&lt;/h2&gt;
&lt;p&gt;A classic data fetching example with classes might look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class Article extends Component {
  state = {
    article: null
  };
  componentDidMount() {
    this.fetchData(this.props.id);
  }
  async fetchData(id) {
    const article = await API.fetchArticle(id);
    this.setState({ article });
  }
  // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you probably know, this code is buggy. It doesn’t handle updates. So the second classic example you could find online is something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{8-12}&quot;&gt;class Article extends Component {
  state = {
    article: null
  };
  componentDidMount() {
    this.fetchData(this.props.id);
  }
  componentDidUpdate(prevProps) {
    if (prevProps.id !== this.props.id) {
      this.fetchData(this.props.id);
    }
  }
  async fetchData(id) {
    const article = await API.fetchArticle(id);
    this.setState({ article });
  }
  // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is definitely better! But it’s still buggy. The reason it’s buggy is that the request may come out of order. So if I’m fetching &lt;code&gt;{id: 10}&lt;/code&gt;, switch to &lt;code&gt;{id: 20}&lt;/code&gt;, but the &lt;code&gt;{id: 20}&lt;/code&gt; request comes first, the request that started earlier but finished later would incorrectly overwrite my state.&lt;/p&gt;
&lt;p&gt;This is called a race condition, and it’s typical in code that mixes &lt;code&gt;async&lt;/code&gt; / &lt;code&gt;await&lt;/code&gt; (which assumes something waits for the result) with top-down data flow (props or state can change while we’re in the middle of an async function).&lt;/p&gt;
&lt;p&gt;Effects don’t magically solve this problem, although they’ll warn you if you try to pass an &lt;code&gt;async&lt;/code&gt; function to the effect directly. (We’ll need to improve that warning to better explain the problems you might run into.)&lt;/p&gt;
&lt;p&gt;If the async approach you use supports cancellation, that’s great! You can cancel the async request right in your cleanup function.&lt;/p&gt;
&lt;p&gt;Alternatively, the easiest stopgap approach is to track it with a boolean:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx{5,9,16-18}&quot;&gt;function Article({ id }) {
  const [article, setArticle] = useState(null);

  useEffect(() =&gt; {
    let didCancel = false;

    async function fetchData() {
      const article = await API.fetchArticle(id);
      if (!didCancel) {
        setArticle(article);
      }
    }

    fetchData();

    return () =&gt; {
      didCancel = true;
    };
  }, [id]);

  // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://www.robinwieruch.de/react-hooks-fetch-data/&quot;&gt;This article&lt;/a&gt; goes into more detail about how you can handle errors and loading states, as well as extract that logic into a custom Hook. I recommend you to check it out if you’re interested to learn more about data fetching with Hooks.&lt;/p&gt;
&lt;h2&gt;Raising the Bar&lt;/h2&gt;
&lt;p&gt;With the class lifecycle mindset, side effects behave differently from the render output. Rendering the UI is driven by props and state, and is guaranteed to be consistent with them, but side effects are not. This is a common source of bugs.&lt;/p&gt;
&lt;p&gt;With the mindset of &lt;code&gt;useEffect&lt;/code&gt;, things are synchronized by default. Side effects become a part of the React data flow. For every &lt;code&gt;useEffect&lt;/code&gt; call, once you get it right, your component handles edge cases much better.&lt;/p&gt;
&lt;p&gt;However, the upfront cost of getting it right is higher. This can be annoying. Writing synchronization code that handles edge cases well is inherently more difficult than firing one-off side effects that aren’t consistent with rendering.&lt;/p&gt;
&lt;p&gt;This could be worrying if &lt;code&gt;useEffect&lt;/code&gt; was meant to be &lt;em&gt;the&lt;/em&gt; tool you use most of the time. However, it’s a low-level building block. It’s an early time for Hooks so everybody uses low-level ones all the time, especially in tutorials. But in practice, it’s likely the community will start moving to higher-level Hooks as good APIs gain momentum.&lt;/p&gt;
&lt;p&gt;I’m seeing different apps create their own Hooks like &lt;code&gt;useFetch&lt;/code&gt; that encapsulates some of their app’s auth logic or &lt;code&gt;useTheme&lt;/code&gt; which uses theme context. Once you have a toolbox of those, you don’t reach for &lt;code&gt;useEffect&lt;/code&gt; &lt;em&gt;that&lt;/em&gt; often. But the resilience it brings benefits every Hook built on top of it.&lt;/p&gt;
&lt;p&gt;So far, &lt;code&gt;useEffect&lt;/code&gt; is most commonly used for data fetching. But data fetching isn’t exactly a synchronization problem. This is especially obvious because our deps are often &lt;code&gt;[]&lt;/code&gt;. What are we even synchronizing?&lt;/p&gt;
&lt;p&gt;In the longer term, &lt;a href=&quot;https://reactjs.org/blog/2018/11/27/react-16-roadmap.html#react-16x-mid-2019-the-one-with-suspense-for-data-fetching&quot;&gt;Suspense for Data Fetching&lt;/a&gt; will allow third-party libraries to have a first-class way to tell React to suspend rendering until something async (anything: code, data, images) is ready.&lt;/p&gt;
&lt;p&gt;As Suspense gradually covers more data fetching use cases, I anticipate that &lt;code&gt;useEffect&lt;/code&gt; will fade into background as a power user tool for cases when you actually want to synchronize props and state to some side effect. Unlike data fetching, it handles this case naturally because it was designed for it. But until then, custom Hooks like &lt;a href=&quot;https://www.robinwieruch.de/react-hooks-fetch-data/&quot;&gt;shown here&lt;/a&gt; are a good way to reuse data fetching logic.&lt;/p&gt;
&lt;h2&gt;In Closing&lt;/h2&gt;
&lt;p&gt;Now that you know pretty much everything I know about using effects, check out the &lt;a href=&quot;#tldr&quot;&gt;TLDR&lt;/a&gt; in the beginning. Does it make sense? Did I miss something? (I haven’t run out of paper yet!)&lt;/p&gt;
&lt;p&gt;I’d love to hear from you on Twitter! Thanks for reading.&lt;/p&gt;
                &lt;div style=&quot;margin-top=55px; font-style: italic;&quot;&gt;(This is an article posted to my blog at overreacted.io. You can read it online by &lt;a href=&quot;https://chuthechuong.github.io/thepapersnotread/a-complete-guide-to-useeffect/&quot;&gt;clicking here&lt;/a&gt;.)&lt;/div&gt;
              </content:encoded></item><item><title><![CDATA[Coping with Feedback]]></title><description><![CDATA[Sometimes I can’t fall asleep.]]></description><link>https://chuthechuong.github.io/thepapersnotread/coping-with-feedback/</link><guid isPermaLink="false">https://chuthechuong.github.io/thepapersnotread/coping-with-feedback/</guid><pubDate>Sat, 02 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;The last few weeks have been very hectic. We’ve finally released a stable version of &lt;a href=&quot;https://reactjs.org/blog/2019/02/06/react-v16.8.0.html&quot;&gt;React Hooks&lt;/a&gt; and the first &lt;a href=&quot;https://reactjs.org/blog/2019/02/23/is-react-translated-yet.html&quot;&gt;React website translations&lt;/a&gt;. Both of these projects meant a lot to me, and shipping them felt great.&lt;/p&gt;
&lt;p&gt;However, I also feel more pressure now to stay on top of the scrutiny that comes when you mark something as stable. Hooks are very new, we are still figuring out “best practices” for some of the less common patterns — both internally at Facebook and in GitHub discussions. But the longer it takes to document and enforce them (e.g. with warnings), the more risk there is that someone will create a course or write an article using a broken pattern without realizing that. It’s hard not to feel at least partially responsible when that happens.&lt;/p&gt;
&lt;p&gt;Most of this is self-imposed. No one technically expects me to care. I do though.&lt;/p&gt;
&lt;p&gt;Maintaining a balance between &lt;em&gt;providing&lt;/em&gt; guidance and &lt;em&gt;learning&lt;/em&gt; from people using an API and their experiences can take some toll. Especially when you don’t know all the answers yet. Over the past weeks, I had a few nights when I couldn’t remember if I slept at all due to nonstopping internal monologue.&lt;/p&gt;
&lt;p&gt;I’ve noticed that I have a particular set of triggers that can cause this. So I’m more careful to avoid them. In case it’s helpful to anyone else, here’s a set of rules I’m trying to follow which seem to help empirically:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Not drinking more than two cups of coffee.&lt;/strong&gt; Coffee is my friend. I tried giving up caffeine for a few months and I had headaches spanning for more than the tolerance period. Coffee actually &lt;em&gt;does&lt;/em&gt; help me (maybe some blood pressure thing?) but in moderation. Drinking more than two cups leaves me too pumped.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Not arguing with strangers after 9pm.&lt;/strong&gt; I love debating things on Twitter, and I’m no stranger to occasional disagreements. Some of them can turn pretty draining emotionally — especially when people assume bad intent. Even if I try to maintain a friendly tone, this kind of thing hurts and then I get too agitated to fall asleep. So I’ve been trying to avoid reading any feedback in the evenings.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Not skipping meals or eating after 8pm.&lt;/strong&gt; This one is weird. (Don’t forget, I’m just describing what works for me!) Generally I’ve been pretty flexible with meals. But lately I’ve noticed that whenever I wake up at 5am and can’t fall asleep, my stomach feels heavy. I don’t know whether it’s the &lt;em&gt;reason&lt;/em&gt; or the &lt;em&gt;consequence&lt;/em&gt; of a buzzing mind, but there is a correlation. Take care of your gut.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Not publishing articles right before going to bed.&lt;/strong&gt; Whenever I share anything, I get a bit excited and nervous about the feedback. (Will anyone notice it? Is it too controversial? How will it rank on aggregators? Do people like reading it?) I found it useful to leave a buffer of a few hours for the initial feedback so that curiosity and nerves don’t wake me up a few hours later.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Not lying there trying to fall asleep.&lt;/strong&gt; A few times, I would wake up at 5am and then lie in bed until 10am in a vain attempt to relax. This doesn’t work for me. However, I’ve noticed that if I simply do whatever I feel like (write some code, read some online junk, eat a banana), eventually I get sleepy. Splitting the night in two halves feels a bit awkward but it’s still better than not sleeping at all.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The deeper problem is that I’m restless when I know there is a problem but I don’t have a fix ready yet. Such as writing documentation, correcting a bug or sharing an idea. This drive can be helpful but at some point it’s not worth it.&lt;/p&gt;
&lt;p&gt;The techniques above help me reduce the anxiety to the point where that drive is productive to me. But I should watch out. It’s important to be surrounded by people who can tell when you’re going off the rails. I feel thankful to have them.&lt;/p&gt;
                &lt;div style=&quot;margin-top=55px; font-style: italic;&quot;&gt;(This is an article posted to my blog at overreacted.io. You can read it online by &lt;a href=&quot;https://chuthechuong.github.io/thepapersnotread/coping-with-feedback/&quot;&gt;clicking here&lt;/a&gt;.)&lt;/div&gt;
              </content:encoded></item><item><title><![CDATA[Fix Like No One’s Watching]]></title><description><![CDATA[The other kind of technical debt.]]></description><link>https://chuthechuong.github.io/thepapersnotread/fix-like-no-ones-watching/</link><guid isPermaLink="false">https://chuthechuong.github.io/thepapersnotread/fix-like-no-ones-watching/</guid><pubDate>Fri, 15 Feb 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Some technical debt is in plain sight.&lt;/p&gt;
&lt;p&gt;An inadequate data structure might lead to convoluted code. When the requirements keep changing, the code might contain traces of previous approaches. Sometimes the code is written in a hurry or is just sloppy.&lt;/p&gt;
&lt;p&gt;This kind of technical debt is easy to discuss because it’s highly visible. It manifests as bugs, performance problems, and difficulties adding features.&lt;/p&gt;
&lt;p&gt;There is another, more insidious kind of technical debt.&lt;/p&gt;
&lt;p&gt;Maybe the test suite is a &lt;em&gt;little bit&lt;/em&gt; slow. Not slow to a crawl — but just enough that you don’t bother looking at a bug and add it to the backlog instead. Maybe you don’t trust the deployment script so you skip that extra release. Perhaps the abstraction layers make it too hard to locate a performance regression so you leave a TODO in the code. Sometimes the unit tests are too rigid so you postpone trying an intriguing new idea until after you’ve shipped the planned features.&lt;/p&gt;
&lt;p&gt;None of these things are dealbreakers. If anything, they might seem like distractions. It feels vain to complain about them. After all, if they &lt;em&gt;really&lt;/em&gt; mattered, you would have done those things despite the friction, wouldn’t you?&lt;/p&gt;
&lt;p&gt;And so these things never get done. They don’t seem important enough by themselves. &lt;strong&gt;The friction killed them.&lt;/strong&gt; Some of these explorations could be of no consequence. Some of them could redefine your project.&lt;/p&gt;
&lt;p&gt;You never know. This is why you must actively reduce friction. Like your project’s fate depends on it. Because it does.&lt;/p&gt;
&lt;p&gt;Fix like no one’s watching.&lt;/p&gt;
                &lt;div style=&quot;margin-top=55px; font-style: italic;&quot;&gt;(This is an article posted to my blog at overreacted.io. You can read it online by &lt;a href=&quot;https://chuthechuong.github.io/thepapersnotread/fix-like-no-ones-watching/&quot;&gt;clicking here&lt;/a&gt;.)&lt;/div&gt;
              </content:encoded></item></channel></rss>